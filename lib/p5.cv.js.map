{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./p5.cv.utils.js","webpack:///./p5.cv.utilities.js","webpack:///./p5.cv.helpers.js","webpack:///./p5.cv.wrappers.js","webpack:///./p5.cv.tracker.js","webpack:///./p5.cv.running_background.js","webpack:///./p5.cv.object_finder.js","webpack:///./p5.cv.flow.js","webpack:///./p5.cv.contour_finder.js","webpack:///./app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","p5","cv","loadOpenCV","onRuntimeInitialized","isReady","onComplete","createFileFromUrl","path","url","callback","request","XMLHttpRequest","open","responseType","onload","ev","readyState","status","data","Uint8Array","response","FS_createDataFile","console","error","send","loadImageToCanvas","cavansId","canvas","document","getElementById","ctx","getContext","img","Image","crossOrigin","width","height","drawImage","src","registerMethod","getWidth","sourceMat","cols","getHeight","rows","getAllocated","getDepthForType","cvImageType","CV_MAT_DEPTH","getDepthForMat","depth","getDepthForImage","CV_8UC4","CV_8UC","channels","CV_8UC1","CV_8UC2","CV_8UC3","CV_8SC","CV_8SC1","CV_8SC2","CV_8SC3","CV_8SC4","CV_16UC","CV_16UC1","CV_16UC2","CV_16UC3","CV_16UC4","CV_16SC","CV_16SC1","CV_16SC2","CV_16SC3","CV_16SC4","CV_32SC","CV_32SC1","CV_32SC2","CV_32SC3","CV_32SC4","CV_32FC","CV_32FC1","CV_32FC2","CV_32FC3","CV_32FC4","CV_64FC","CV_64FC1","CV_64FC2","CV_64FC3","CV_64FC4","CV_CN_MAX","CV_CN_SHIFT","CV_DEPTH_MAX","CV_MAT_CN_MASK","CV_MAT_CN","flags","CV_MAT_DEPTH_MASK","CV_MAKETYPE","cn","getCvImageType","cvDepth","CV_8U","getCvImageTypeForImage","getChannelsForType","getChannelsForImage","getChannelsForMat","copyTo","destinationMat","type","alpha","getMaxVal","convertTo","copy","dstDepth","allocate","cvType","imitateWithType","mirror","original","mirrorCvImageType","ow","oh","imitate","getMaxValForDepth","CV_16U","CV_8S","CV_16S","CV_32S","CV_32F","CV_64F","getMaxValForMat","mat","getColorConversionTypes","types","indexOf","push","getTargetChannelsFromCode","conversionCode","COLOR_RGB2RGBA","COLOR_RGBA2RGB","COLOR_RGB2BGRA","COLOR_RGBA2BGR","COLOR_BGR2RGB","COLOR_BGRA2RGBA","COLOR_BGR2GRAY","COLOR_RGB2GRAY","COLOR_GRAY2RGB","COLOR_GRAY2RGBA","COLOR_BGRA2GRAY","COLOR_RGBA2GRAY","COLOR_BGR5652BGR","COLOR_BGR5652RGB","COLOR_BGR5652BGRA","COLOR_BGR5652RGBA","COLOR_BGR5652GRAY","COLOR_BGR5552BGR","COLOR_BGR5552RGB","COLOR_BGR5552BGRA","COLOR_BGR5552RGBA","COLOR_BGR5552GRAY","COLOR_BGR2XYZ","COLOR_RGB2XYZ","COLOR_XYZ2BGR","COLOR_XYZ2RGB","COLOR_BGR2YCrCb","COLOR_RGB2YCrCb","COLOR_YCrCb2BGR","COLOR_YCrCb2RGB","COLOR_BGR2HSV","COLOR_RGB2HSV","COLOR_BGR2Lab","COLOR_RGB2Lab","COLOR_BayerGB2BGR","COLOR_BayerBG2RGB","COLOR_BayerGB2RGB","COLOR_BayerRG2RGB","COLOR_BGR2Luv","COLOR_RGB2Luv","COLOR_BGR2HLS","COLOR_RGB2HLS","COLOR_HSV2BGR","COLOR_HSV2RGB","COLOR_Lab2BGR","COLOR_Lab2RGB","COLOR_Luv2BGR","COLOR_Luv2RGB","COLOR_HLS2BGR","COLOR_HLS2RGB","COLOR_BayerBG2RGB_VNG","COLOR_BayerGB2RGB_VNG","COLOR_BayerRG2RGB_VNG","COLOR_BayerGR2RGB_VNG","COLOR_BGR2HSV_FULL","COLOR_RGB2HSV_FULL","COLOR_BGR2HLS_FULL","COLOR_RGB2HLS_FULL","COLOR_HSV2BGR_FULL","COLOR_HSV2RGB_FULL","COLOR_HLS2BGR_FULL","COLOR_HLS2RGB_FULL","COLOR_LBGR2Lab","COLOR_LRGB2Lab","COLOR_LBGR2Luv","COLOR_LRGB2Luv","COLOR_Lab2LBGR","COLOR_Lab2LRGB","COLOR_Luv2LBGR","COLOR_Luv2LRGB","COLOR_BGR2YUV","COLOR_RGB2YUV","COLOR_YUV2BGR","COLOR_YUV2RGB","pixelsToCvMat","pixels","matFromArray","imageDataToCvMat","imageData","matFromImageData","vectorsToCvContour","points","length","map","pt","x","y","flat","colorToCvScalar","color","levels","cvRotatedRectToPoints","rect","RotatedRect","cvRotatedRectToVectors","createVector","cvContourToPoints","contour","cvPointToVector","point","cvRectVectorToArray","rectVector","array","rectVectorSize","size","ZERO_SCALAR","makeMatrix","rotation","translation","rot3x3","Mat","Rodrigues","rm","data32F","tm","applyMatrix","transformationMatrix4x4","drawMat","p5Image","matToNewImage","image","remove","drawVectors","vectors","vector","close","numVectors","beginShape","vertex","endShape","drawRotatedRect","rotatedRect","center","translate","rotate","radians","angle","pop","drawRotatedEllipse","rotatedEllipse","ellipse","findMaxLocation","minMaxLoc","maxLoc","meanCols","colMat","row","mean","col","meanRows","rowMat","sumCols","reduce","a","b","sumRows","minCols","minVal","minRows","maxCols","maxVal","maxRows","findFirst","target","charAt","findLast","getBoundingBox","thresh","invert","THRESH_BINARY_INV","THRESH_BINARY","box","Rect","threshold","weightedAverageAngle","linesMat","angleSum","weights","start","Point","data32S","end","diff","Vector","sub","mag","weight","atan2","autorotate","threshold1","threshold2","threshMat","Canny","lines","angleResolution","PI","minLineLength","srcMat","HoughLinesP","rotationAmount","ofRadToDeg","imageToNewMat","sourceImage","imread","imageToMat","cvMat","sourceWidth","sourceHeight","numBytes","getImageData","matToImage","destinationImage","imshow","createImage","areSamesize","matA","matB","Scalar","add","invertTo","bitwise_not","lerp","lerpFromMat","lerpToMat","lerpResult","amount","addWeighted","accumulate","newMat","accumulatorMat","accumulateWeighted","normalizeTo","normalize","NORM_MINMAX","thresholdTo","thresholdValue","MINUS_ONE_POINT","erodeTo","iterations","erode","dilateTo","dilate","autothresholdTo","THRESH_OTSU","autothreshold","convertColor","code","targetChannels","cvtColor","convertSingleColor","p5Color","zeros","_getRed","_getGreen","_getBlue","Array","from","_getAlpha","copyGray","forceOdd","Math","floor","blurTo","blur","Size","GaussianBlurTo","GaussianBlur","medianBlurTo","medianBlur","equalizeHistTo","sourceChannels","MatVector","destinationChannels","split","equalizeHist","merge","apertureSize","L2gradient","Sobel","ddepth","dx","dy","ksize","scale","delta","borderType","BORDER_DEFAULT","warpPerspective","destinationPoints","INTER_LINEAR","w","h","sourcePoints","transform","getPerspectiveTransform","unwarpPerspective","dstMat","warpPerspectiveFromTranform","resizeTo","interpolation","resize","resizeToScale","xScale","yScale","dstWidth","dstHeight","resizeToDimensions","cvPointsToJS","result","cvPointsToVectors","cvFeaturesToPoints","getFeatureAsPoint","index","cvLineToJS","cvLineToVectors","convexHullFromMat","contourMat","hull","convexHull","convexityDefectsCv","defects","convexityDefects","convexityDefectsFromVectors","minAreaRectFromVectors","minAreaRect","fitEllipseFromVectors","fitEllipse","fitLineFromVectors","line","fitLine","DIST_L2","vx","vy","lefty","round","righty","fillPoly","numPoints","setTo","FLIP_HORIZONTAL","FLIP_VERTICAL","FLIP_BOTH","flipTo","flip","rotateTo","fill","rotationMatrix","getRotationMatrix2D","warpAffine","BORDER_CONSTANT","rotate90To","transpose","rotate90","transposeTo","swap","temp","clone","trackingDistanceRect","dw","dh","sqrt","trackingDistancePoint","dist","isPoint","isRect","trackingDistance","warn","TrackedObject","label","this","lastSeen","age","previous","old","visible","Tracker","current","currentLabels","previousLabels","newLabels","deadLabels","previousLabelMap","Map","currentLabelMap","persistence","curLabel","maximumDistance","persistance","distance","objects","concat","all","j","curDistance","pair","sort","sortByDistance","matchedObjects","matchedPrevious","allSize","k","match","newFromPrevious","initFromPreviousObject","timeStep","getLabel","getNewLabel","newWithLabel","initFromObject","getLastSeen","clear","currentSize","set","previousSize","has","getIndex","getAge","RectTracker","smoothingRate","smoothed","labels","labelsSize","cur","getCurrent","smooth","entries","existsCurrent","getLabelFromIndex","existsPrevious","getPrevious","previousPosition","currentPosition","PointTracker","Follower","dead","track","RectFollower","PointFollower","TrackerFollower","followers","curFollower","update","kill","newLabelsSize","newFollower","setup","setLabel","getDead","splice","RectTrackerFollower","PointTrackerFollower","DifferenceMode","RunningBackground","learningRate","learningTime","useLearningTime","ignoreForeground","needToReset","differenceMode","accumulator","background","foreground","foregroundGray","frame","thresholded","empty","log","absdiff","subtract","thresholdMode","curLearningRate","float","pow","ObjectFinder","rescale","multiScaleFactor","minNeighbors","minSizeScale","maxSizeScale","useHistogramEqualization","cannyPrunning","findBiggestObject","gray","graySmall","classifier","CascadeClassifier","tracker","cascadeFilename","load","newFrameMat","minSize","maxSize","minSide","min","side","RectVector","detectMultiScale","cannyPruning","CASCADE_DO_CANNY_PRUNING","CASCADE_FIND_BIGGEST_OBJECT","CASCADE_DO_ROUGH_SEARCH","objectsSize","getSmoothed","getVelocity","getCurrentLabels","noFill","stroke","getObject","text","preset","FAST","setRescale","setMinNeighbors","setMultiScaleFactor","setMinSizeScale","setMaxSizeScale","setCannyPruning","setFindBiggestObject","ACCURATE","SENSITIVE","Flow","last","curr","hasFlow","lastMat","currentMat","calcFlow","lastSize","currSize","renderWidth","renderHeight","drawFlow","prevMat","nextMat","FlowPyrLK","prevPts","nextPts","windowSize","maxLevel","maxFeatures","maxCorners","blockSize","qualityLevel","minDistance","criteria","TermCriteria","TERM_CRITERIA_EPS","TERM_CRITERIA_COUNT","pyramidLevels","calcFeaturesNextFrame","pyramid","prevPyramid","err","winSize","featuresSize","features","resetFeaturesToTrack","drawX","drawY","drawWidth","drawHeight","scaleX","scaleY","prevPtsSize","LINES","calcFeaturesToTrack","calcOpticalFlowPyrLK","goodFeaturesToTrack","FlowFarneback","flow","pyramidScale","numLevels","numIterations","polyN","polySigma","farnebackGaussian","renderStep","constrain","gaussian","OPTFLOW_USE_INITIAL_FLOW","OPTFLOW_FARNEBACK_GAUSSIAN","calcOpticalFlowFarneback","getTotalFlowInRegion","getAverageFlowInRegion","xIndex","yIndex","position","getFlowOffset","regionX","regionY","regionWidth","regionHeight","total","rectX","rectY","rectWidth","rectHeight","flowPosition","getFlowPosition","OFlow","step","uMotionGraph","Graph","vMotionGraph","samePixels","A2","A1B2","B1","C1","C2","u","v","uu","vv","newImage","oldImage","zones","winStep","globalY","globalX","localY","localX","wMax","hMax","address","gradX","gradY","gradT","Idelta","norm","addSample","strokeWeight","forEach","zone","draw","a1","a2","stride","same","matAGray","matBGray","countNonZero","TrackingColorMode","TRACK_COLOR_RGB","TRACK_COLOR_HSV","TRACK_COLOR_H","TRACK_COLOR_HS","ContourFinder","hsvBuffer","autoThreshold","simplify","thresholdValueMax","useTargetColor","trackingColorMode","targetColor","minArea","maxArea","Number","POSITIVE_INFINITY","minAreaNorm","maxAreaNorm","contours","polylines","boundingRects","holes","contourFindingMode","CV_RETR_EXTERNAL","sortBySize","resetMinArea","resetMaxArea","offset","base","inRange","COLOR_RGBA2HSV","lowerb","upperb","allContours","hierarchy","simplifyMode","HAIN_APPROX_SIMPLE","CHAIN_APPROX_NONE","findContours","needMinFilter","needMaxFilter","allIndices","allAreas","allHoles","imgArea","imgMinArea","imgMaxArea","curArea","contourArea","hole","push_back","allIndicesSize","boundingRect","findHoles","RETR_LIST","RETR_EXTERNAL","sizeSort","getBoundingRect","moments","m00","m10","m01","cvPoint","average","getCentroid","getCenter","arcLength","minEnclosingCircle","getMinAreaRect","getConvexHull","quad","infinity","minEpsilon","maxEpsilon","curEpsilon","approxPolyDP","polylinesSize","setMinArea","setMaxArea","minAreaRadius","maxAreaRadius","window"],"mappings":"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","file":"p5.cv.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","// OpenCV.js <-> p5.js setup\np5.cv = {};\np5.prototype.loadOpenCV = function () {\n  // from https://docs.opencv.org/4.4.0/utils.js\n\n  cv.onRuntimeInitialized = function () {\n    p5.cv.isReady = true;\n    if (p5.cv.onComplete) {\n      p5.cv.onComplete();\n    }\n  };\n\n  p5.cv.createFileFromUrl = function (path, url, callback) {\n    let request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n    request.onload = function (ev) {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          let data = new Uint8Array(request.response);\n          cv.FS_createDataFile('/', path, data, true, false, false);\n          callback();\n        } else {\n          console.error('Failed to load ' + url + ' status: ' + request.status);\n        }\n      }\n    };\n    request.send();\n  };\n\n  p5.cv.loadImageToCanvas = function (url, cavansId) {\n    let canvas = document.getElementById(cavansId);\n    let ctx = canvas.getContext('2d');\n    let img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = function () {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0, img.width, img.height);\n    };\n    img.src = url;\n  };\n};\n\np5.prototype.registerMethod('init', p5.prototype.loadOpenCV);\n","// Utilities.h\n\np5.cv.getWidth = function (sourceMat) {\n  return sourceMat.cols;\n};\np5.cv.getHeight = function (sourceMat) {\n  return sourceMat.rows;\n};\np5.cv.getAllocated = function (sourceMat) {\n  //return p5.cv.getWidth(sourceMat) > 0 && p5.cv.getHeight(sourceMat) > 0;\n  return sourceMat.rows > 0 && sourceMat.cols > 0;\n};\np5.cv.getDepthForType = function (cvImageType) {\n  return cv.CV_MAT_DEPTH(cvImageType);\n};\np5.cv.getDepthForMat = function (sourceMat) {\n  return sourceMat.depth();\n};\n// p5.Image / p5.Graphics will use Canvas = RGBA\np5.cv.getDepthForImage = function () {\n  return cv.CV_8UC4;\n};\ncv.CV_8UC = function (channels) {\n  if (channels == 1) return cv.CV_8UC1;\n  if (channels == 2) return cv.CV_8UC2;\n  if (channels == 3) return cv.CV_8UC3;\n  if (channels == 4) return cv.CV_8UC4;\n  return cv.CV_8UC1;\n};\ncv.CV_8SC = function (channels) {\n  if (channels == 1) return cv.CV_8SC1;\n  if (channels == 2) return cv.CV_8SC2;\n  if (channels == 3) return cv.CV_8SC3;\n  if (channels == 4) return cv.CV_8SC4;\n  return cv.CV_8SC1;\n};\ncv.CV_16UC = function (channels) {\n  if (channels == 1) return cv.CV_16UC1;\n  if (channels == 2) return cv.CV_16UC2;\n  if (channels == 3) return cv.CV_16UC3;\n  if (channels == 4) return cv.CV_16UC4;\n  return cv.CV_16UC1;\n};\ncv.CV_16SC = function (channels) {\n  if (channels == 1) return cv.CV_16SC1;\n  if (channels == 2) return cv.CV_16SC2;\n  if (channels == 3) return cv.CV_16SC3;\n  if (channels == 4) return cv.CV_16SC4;\n  return cv.CV_16SC1;\n};\ncv.CV_32SC = function (channels) {\n  if (channels == 1) return cv.CV_32SC1;\n  if (channels == 2) return cv.CV_32SC2;\n  if (channels == 3) return cv.CV_32SC3;\n  if (channels == 4) return cv.CV_32SC4;\n  return cv.CV_32SC1;\n};\ncv.CV_32FC = function (channels) {\n  if (channels == 1) return cv.CV_32FC1;\n  if (channels == 2) return cv.CV_32FC2;\n  if (channels == 3) return cv.CV_32FC3;\n  if (channels == 4) return cv.CV_32FC4;\n  return cv.CV_32FC1;\n};\ncv.CV_64FC = function (channels) {\n  if (channels == 1) return cv.CV_64FC1;\n  if (channels == 2) return cv.CV_64FC2;\n  if (channels == 3) return cv.CV_64FC3;\n  if (channels == 4) return cv.CV_64FC4;\n  return cv.CV_64FC1;\n};\n\ncv.CV_CN_MAX = 512;\ncv.CV_CN_SHIFT = 3;\ncv.CV_DEPTH_MAX = 1 << cv.CV_CN_SHIFT;\n// #define CV_MAT_CN_MASK          ((CV_CN_MAX - 1) << CV_CN_SHIFT)\ncv.CV_MAT_CN_MASK = (cv.CV_CN_MAX - 1) << cv.CV_CN_SHIFT;\ncv.CV_MAT_CN = function (flags) {\n  return ((flags & cv.CV_MAT_CN_MASK) >> cv.CV_CN_SHIFT) + 1;\n};\ncv.CV_MAT_DEPTH_MASK = cv.CV_DEPTH_MAX - 1;\ncv.CV_MAT_DEPTH = function (flags) {\n  return flags & cv.CV_MAT_DEPTH_MASK;\n};\ncv.CV_MAKETYPE = function (depth, cn) {\n  return cv.CV_MAT_DEPTH(depth) + ((cn - 1) << cv.CV_CN_SHIFT);\n};\np5.cv.getCvImageType = function (channels, cvDepth = cv.CV_8U) {\n  return cv.CV_MAKETYPE(cvDepth, channels);\n};\np5.cv.getCvImageTypeForImage = function (cvDepth = CV_8U) {\n  return cv.CV_MAKETYPE(cvDepth, 4);\n};\np5.cv.getChannelsForType = function (cvImageType) {\n  return cv.CV_MAT_CN(cvImageType);\n};\n// p5.Image / p5.Graphics will use Canvas = RGBA\np5.cv.getChannelsForImage = function () {\n  return 4;\n};\np5.cv.getChannelsForMat = function (sourceMat) {\n  return sourceMat.channels();\n};\np5.cv.copyTo = function (sourceMat, destinationMat) {\n  if (sourceMat.type() == destinationMat.type()) {\n    sourceMat.copyTo(destinationMat);\n  } else {\n    let alpha = p5.cv.getMaxVal(destinationMat) / p5.cv.getMaxVal(sourceMat);\n    sourceMat.convertTo(destinationMat, destinationMat.depth(), alpha);\n  }\n};\np5.cv.copy = function (sourceMat, destinationMat) {\n  let dstDepth;\n  if (p5.cv.getAllocated(destinationMat)) {\n    dstDepth = p5.cv.getDepthForMat(destinationMat);\n  } else {\n    dstDepth = p5.cv.getDepthForMat(sourceMat);\n  }\n  p5.cv.copyTo(sourceMat, destinationMat, dstDepth);\n};\n\np5.cv.allocate = function (sourceMat, width, height, cvType) {\n  if (\n    p5.cv.getWidth(sourceMat) != width ||\n    p5.cv.getHeight(sourceMat) != height ||\n    p5.cv.getCvImageType(sourceMat) != cvType\n  ) {\n    sourceMat.create(height, width, cvType);\n  }\n};\np5.cv.imitateWithType = function (mirror, original, mirrorCvImageType) {\n  let ow = p5.cv.getWidth(original),\n    oh = p5.cv.getHeight(original);\n  p5.cv.allocate(mirror, ow, oh, mirrorCvImageType);\n};\np5.cv.imitate = function (mirror, original) {\n  p5.cv.imitateWithType(mirror, original, p5.cv.getCvImageType(original));\n};\n// maximum possible values for that depth or matrix\np5.cv.getMaxValForDepth = function (cvDepth) {\n  switch (cvDepth) {\n    case cv.CV_8U:\n      return 255;\n    case cv.CV_16U:\n      return 65535;\n\n    case cv.CV_8S:\n      return 127;\n    case cv.CV_16S:\n      return 32767;\n    case cv.CV_32S:\n      return 2147483647;\n\n    case cv.CV_32F:\n      return 1.0;\n    case cv.CV_64F:\n    default:\n      return 1.0;\n  }\n};\n\np5.cv.getMaxValForMat = function (mat) {\n  return p5.cv.getMaxValForDepth(mat.depth());\n};\n\n// float getMaxVal(const cv::Mat& mat);\np5.cv.getColorConversionTypes = function () {\n  let types = [];\n  for (property in cv) {\n    if (property.indexOf('COLOR_') == 0) {\n      types.push(property);\n    }\n  }\n  return types;\n};\np5.cv.getTargetChannelsFromCode = function (conversionCode) {\n  // TODO: add the rest of the modes\n  // [\"COLOR_BGR2BGR555\",\"COLOR_BGR2BGR565\",\"COLOR_BGR2BGRA\",\"COLOR_BGR2GRAY\",\"COLOR_BGR2HLS\",\"COLOR_BGR2HLS_FULL\",\"COLOR_BGR2HSV\",\"COLOR_BGR2HSV_FULL\",\"COLOR_BGR2Lab\",\"COLOR_BGR2Luv\",\"COLOR_BGR2RGB\",\"COLOR_BGR2RGBA\",\"COLOR_BGR2XYZ\",\"COLOR_BGR2YCrCb\",\"COLOR_BGR2YUV\",\"COLOR_BGR2YUV_I420\",\"COLOR_BGR2YUV_IYUV\",\"COLOR_BGR2YUV_YV12\",\"COLOR_BGR5552BGR\",\"COLOR_BGR5552BGRA\",\"COLOR_BGR5552GRAY\",\"COLOR_BGR5552RGB\",\"COLOR_BGR5552RGBA\",\"COLOR_BGR5652BGR\",\"COLOR_BGR5652BGRA\",\"COLOR_BGR5652GRAY\",\"COLOR_BGR5652RGB\",\"COLOR_BGR5652RGBA\",\"COLOR_BGRA2BGR\",\"COLOR_BGRA2BGR555\",\"COLOR_BGRA2BGR565\",\"COLOR_BGRA2GRAY\",\"COLOR_BGRA2RGB\",\"COLOR_BGRA2RGBA\",\"COLOR_BGRA2YUV_I420\",\"COLOR_BGRA2YUV_IYUV\",\"COLOR_BGRA2YUV_YV12\",\"COLOR_BayerBG2BGR\",\"COLOR_BayerBG2BGRA\",\"COLOR_BayerBG2BGR_EA\",\"COLOR_BayerBG2BGR_VNG\",\"COLOR_BayerBG2GRAY\",\"COLOR_BayerBG2RGB\",\"COLOR_BayerBG2RGBA\",\"COLOR_BayerBG2RGB_EA\",\"COLOR_BayerBG2RGB_VNG\",\"COLOR_BayerGB2BGR\",\"COLOR_BayerGB2BGRA\",\"COLOR_BayerGB2BGR_EA\",\"COLOR_BayerGB2BGR_VNG\",\"COLOR_BayerGB2GRAY\",\"COLOR_BayerGB2RGB\",\"COLOR_BayerGB2RGBA\",\"COLOR_BayerGB2RGB_EA\",\"COLOR_BayerGB2RGB_VNG\",\"COLOR_BayerGR2BGR\",\"COLOR_BayerGR2BGRA\",\"COLOR_BayerGR2BGR_EA\",\"COLOR_BayerGR2BGR_VNG\",\"COLOR_BayerGR2GRAY\",\"COLOR_BayerGR2RGB\",\"COLOR_BayerGR2RGBA\",\"COLOR_BayerGR2RGB_EA\",\"COLOR_BayerGR2RGB_VNG\",\"COLOR_BayerRG2BGR\",\"COLOR_BayerRG2BGRA\",\"COLOR_BayerRG2BGR_EA\",\"COLOR_BayerRG2BGR_VNG\",\"COLOR_BayerRG2GRAY\",\"COLOR_BayerRG2RGB\",\"COLOR_BayerRG2RGBA\",\"COLOR_BayerRG2RGB_EA\",\"COLOR_BayerRG2RGB_VNG\",\"COLOR_GRAY2BGR\",\"COLOR_GRAY2BGR555\",\"COLOR_GRAY2BGR565\",\"COLOR_GRAY2BGRA\",\"COLOR_GRAY2RGB\",\"COLOR_GRAY2RGBA\",\"COLOR_HLS2BGR\",\"COLOR_HLS2BGR_FULL\",\"COLOR_HLS2RGB\",\"COLOR_HLS2RGB_FULL\",\"COLOR_HSV2BGR\",\"COLOR_HSV2BGR_FULL\",\"COLOR_HSV2RGB\",\"COLOR_HSV2RGB_FULL\",\"COLOR_LBGR2Lab\",\"COLOR_LBGR2Luv\",\"COLOR_LRGB2Lab\",\"COLOR_LRGB2Luv\",\"COLOR_Lab2BGR\",\"COLOR_Lab2LBGR\",\"COLOR_Lab2LRGB\",\"COLOR_Lab2RGB\",\"COLOR_Luv2BGR\",\"COLOR_Luv2LBGR\",\"COLOR_Luv2LRGB\",\"COLOR_Luv2RGB\",\"COLOR_RGB2BGR\",\"COLOR_RGB2BGR555\",\"COLOR_RGB2BGR565\",\"COLOR_RGB2BGRA\",\"COLOR_RGB2GRAY\",\"COLOR_RGB2HLS\",\"COLOR_RGB2HLS_FULL\",\"COLOR_RGB2HSV\",\"COLOR_RGB2HSV_FULL\",\"COLOR_RGB2Lab\",\"COLOR_RGB2Luv\",\"COLOR_RGB2RGBA\",\"COLOR_RGB2XYZ\",\"COLOR_RGB2YCrCb\",\"COLOR_RGB2YUV\",\"COLOR_RGB2YUV_I420\",\"COLOR_RGB2YUV_IYUV\",\"COLOR_RGB2YUV_YV12\",\"COLOR_RGBA2BGR\",\"COLOR_RGBA2BGR555\",\"COLOR_RGBA2BGR565\",\"COLOR_RGBA2BGRA\",\"COLOR_RGBA2GRAY\",\"COLOR_RGBA2RGB\",\"COLOR_RGBA2YUV_I420\",\"COLOR_RGBA2YUV_IYUV\",\"COLOR_RGBA2YUV_YV12\",\"COLOR_RGBA2mRGBA\",\"COLOR_XYZ2BGR\",\"COLOR_XYZ2RGB\",\"COLOR_YCrCb2BGR\",\"COLOR_YCrCb2RGB\",\"COLOR_YUV2BGR\",\"COLOR_YUV2BGRA_I420\",\"COLOR_YUV2BGRA_IYUV\",\"COLOR_YUV2BGRA_NV12\",\"COLOR_YUV2BGRA_NV21\",\"COLOR_YUV2BGRA_UYNV\",\"COLOR_YUV2BGRA_UYVY\",\"COLOR_YUV2BGRA_Y422\",\"COLOR_YUV2BGRA_YUNV\",\"COLOR_YUV2BGRA_YUY2\",\"COLOR_YUV2BGRA_YUYV\",\"COLOR_YUV2BGRA_YV12\",\"COLOR_YUV2BGRA_YVYU\",\"COLOR_YUV2BGR_I420\",\"COLOR_YUV2BGR_IYUV\",\"COLOR_YUV2BGR_NV12\",\"COLOR_YUV2BGR_NV21\",\"COLOR_YUV2BGR_UYNV\",\"COLOR_YUV2BGR_UYVY\",\"COLOR_YUV2BGR_Y422\",\"COLOR_YUV2BGR_YUNV\",\"COLOR_YUV2BGR_YUY2\",\"COLOR_YUV2BGR_YUYV\",\"COLOR_YUV2BGR_YV12\",\"COLOR_YUV2BGR_YVYU\",\"COLOR_YUV2GRAY_420\",\"COLOR_YUV2GRAY_I420\",\"COLOR_YUV2GRAY_IYUV\",\"COLOR_YUV2GRAY_NV12\",\"COLOR_YUV2GRAY_NV21\",\"COLOR_YUV2GRAY_UYNV\",\"COLOR_YUV2GRAY_UYVY\",\"COLOR_YUV2GRAY_Y422\",\"COLOR_YUV2GRAY_YUNV\",\"COLOR_YUV2GRAY_YUY2\",\"COLOR_YUV2GRAY_YUYV\",\"COLOR_YUV2GRAY_YV12\",\"COLOR_YUV2GRAY_YVYU\",\"COLOR_YUV2RGB\",\"COLOR_YUV2RGBA_I420\",\"COLOR_YUV2RGBA_IYUV\",\"COLOR_YUV2RGBA_NV12\",\"COLOR_YUV2RGBA_NV21\",\"COLOR_YUV2RGBA_UYNV\",\"COLOR_YUV2RGBA_UYVY\",\"COLOR_YUV2RGBA_Y422\",\"COLOR_YUV2RGBA_YUNV\",\"COLOR_YUV2RGBA_YUY2\",\"COLOR_YUV2RGBA_YUYV\",\"COLOR_YUV2RGBA_YV12\",\"COLOR_YUV2RGBA_YVYU\",\"COLOR_YUV2RGB_I420\",\"COLOR_YUV2RGB_IYUV\",\"COLOR_YUV2RGB_NV12\",\"COLOR_YUV2RGB_NV21\",\"COLOR_YUV2RGB_UYNV\",\"COLOR_YUV2RGB_UYVY\",\"COLOR_YUV2RGB_Y422\",\"COLOR_YUV2RGB_YUNV\",\"COLOR_YUV2RGB_YUY2\",\"COLOR_YUV2RGB_YUYV\",\"COLOR_YUV2RGB_YV12\",\"COLOR_YUV2RGB_YVYU\",\"COLOR_YUV420p2BGR\",\"COLOR_YUV420p2BGRA\",\"COLOR_YUV420p2GRAY\",\"COLOR_YUV420p2RGB\",\"COLOR_YUV420p2RGBA\",\"COLOR_YUV420sp2BGR\",\"COLOR_YUV420sp2BGRA\",\"COLOR_YUV420sp2GRAY\",\"COLOR_YUV420sp2RGB\",\"COLOR_YUV420sp2RGBA\",\"COLOR_mRGBA2RGBA\"]\n  if (conversionCode === cv.COLOR_RGB2RGBA) return 4;\n  if (conversionCode === cv.COLOR_RGBA2RGB) return 3;\n  if (conversionCode === cv.COLOR_RGB2BGRA) return 4;\n  if (conversionCode === cv.COLOR_RGBA2BGR) return 3;\n  if (conversionCode === cv.COLOR_BGR2RGB) return 3;\n  if (conversionCode === cv.COLOR_BGRA2RGBA) return 4;\n  if (conversionCode === cv.COLOR_BGR2GRAY) return 1;\n  if (conversionCode === cv.COLOR_RGB2GRAY) return 1;\n  if (conversionCode === cv.COLOR_GRAY2RGB) return 3;\n  if (conversionCode === cv.COLOR_GRAY2RGBA) return 4;\n  if (conversionCode === cv.COLOR_BGRA2GRAY) return 1;\n  if (conversionCode === cv.COLOR_RGBA2GRAY) return 1;\n  if (conversionCode === cv.COLOR_BGR5652BGR) return 3;\n  if (conversionCode === cv.COLOR_BGR5652RGB) return 3;\n  if (conversionCode === cv.COLOR_BGR5652BGRA) return 4;\n  if (conversionCode === cv.COLOR_BGR5652RGBA) return 4;\n  if (conversionCode === cv.COLOR_BGR5652GRAY) return 1;\n  if (conversionCode === cv.COLOR_BGR5552BGR) return 3;\n  if (conversionCode === cv.COLOR_BGR5552RGB) return 3;\n  if (conversionCode === cv.COLOR_BGR5552BGRA) return 4;\n  if (conversionCode === cv.COLOR_BGR5552RGBA) return 4;\n  if (conversionCode === cv.COLOR_BGR5552GRAY) return 1;\n  if (conversionCode === cv.COLOR_BGR2XYZ) return 3;\n  if (conversionCode === cv.COLOR_RGB2XYZ) return 3;\n  if (conversionCode === cv.COLOR_XYZ2BGR) return 3;\n  if (conversionCode === cv.COLOR_XYZ2RGB) return 3;\n  if (conversionCode === cv.COLOR_BGR2YCrCb) return 3;\n  if (conversionCode === cv.COLOR_RGB2YCrCb) return 3;\n  if (conversionCode === cv.COLOR_YCrCb2BGR) return 3;\n  if (conversionCode === cv.COLOR_YCrCb2RGB) return 3;\n  if (conversionCode === cv.COLOR_BGR2HSV) return 3;\n  if (conversionCode === cv.COLOR_RGB2HSV) return 3;\n  if (conversionCode === cv.COLOR_BGR2Lab) return 3;\n  if (conversionCode === cv.COLOR_RGB2Lab) return 3;\n  if (conversionCode === cv.COLOR_BayerGB2BGR) return 3;\n  if (conversionCode === cv.COLOR_BayerBG2RGB) return 3;\n  if (conversionCode === cv.COLOR_BayerGB2RGB) return 3;\n  if (conversionCode === cv.COLOR_BayerRG2RGB) return 3;\n  if (conversionCode === cv.COLOR_BGR2Luv) return 3;\n  if (conversionCode === cv.COLOR_RGB2Luv) return 3;\n  if (conversionCode === cv.COLOR_BGR2HLS) return 3;\n  if (conversionCode === cv.COLOR_RGB2HLS) return 3;\n  if (conversionCode === cv.COLOR_HSV2BGR) return 3;\n  if (conversionCode === cv.COLOR_HSV2RGB) return 3;\n  if (conversionCode === cv.COLOR_Lab2BGR) return 3;\n  if (conversionCode === cv.COLOR_Lab2RGB) return 3;\n  if (conversionCode === cv.COLOR_Luv2BGR) return 3;\n  if (conversionCode === cv.COLOR_Luv2RGB) return 3;\n  if (conversionCode === cv.COLOR_HLS2BGR) return 3;\n  if (conversionCode === cv.COLOR_HLS2RGB) return 3;\n  if (conversionCode === cv.COLOR_BayerBG2RGB_VNG) return 3;\n  if (conversionCode === cv.COLOR_BayerGB2RGB_VNG) return 3;\n  if (conversionCode === cv.COLOR_BayerRG2RGB_VNG) return 3;\n  if (conversionCode === cv.COLOR_BayerGR2RGB_VNG) return 3;\n  if (conversionCode === cv.COLOR_BGR2HSV_FULL) return 3;\n  if (conversionCode === cv.COLOR_RGB2HSV_FULL) return 3;\n  if (conversionCode === cv.COLOR_BGR2HLS_FULL) return 3;\n  if (conversionCode === cv.COLOR_RGB2HLS_FULL) return 3;\n  if (conversionCode === cv.COLOR_HSV2BGR_FULL) return 3;\n  if (conversionCode === cv.COLOR_HSV2RGB_FULL) return 3;\n  if (conversionCode === cv.COLOR_HLS2BGR_FULL) return 3;\n  if (conversionCode === cv.COLOR_HLS2RGB_FULL) return 3;\n  if (conversionCode === cv.COLOR_LBGR2Lab) return 3;\n  if (conversionCode === cv.COLOR_LRGB2Lab) return 3;\n  if (conversionCode === cv.COLOR_LBGR2Luv) return 3;\n  if (conversionCode === cv.COLOR_LRGB2Luv) return 3;\n  if (conversionCode === cv.COLOR_Lab2LBGR) return 4;\n  if (conversionCode === cv.COLOR_Lab2LRGB) return 4;\n  if (conversionCode === cv.COLOR_Luv2LBGR) return 4;\n  if (conversionCode === cv.COLOR_Luv2LRGB) return 4;\n  if (conversionCode === cv.COLOR_BGR2YUV) return 3;\n  if (conversionCode === cv.COLOR_RGB2YUV) return 3;\n  if (conversionCode === cv.COLOR_YUV2BGR) return 3;\n  if (conversionCode === cv.COLOR_YUV2RGB) return 3;\n  return 0;\n};\n\np5.cv.pixelsToCvMat = function (width, height, pixels) {\n  return cv.matFromArray(width, height, cv.CV_8UC4, pixels);\n};\np5.cv.imageDataToCvMat = function (imageData) {\n  return cv.matFromImageData(imageData);\n};\n// std::vector<cv::Point2f> toCv(const ofPolyline& polyline);\n// TODO: ask Golan if vectorsToCvMat is explanatory enough: this can represent a contour or a hull\np5.cv.vectorsToCvContour = function (points) {\n  // extract x,y points into value array and flatten that\n  return cv.matFromArray(\n    points.length,\n    1,\n    cv.CV_32SC2,\n    points.map((pt) => [pt.x, pt.y]).flat()\n  );\n};\np5.cv.colorToCvScalar = function (color) {\n  return color.levels;\n};\n// TODO: cv::Mat toCv(ofMesh& mesh);\n// cv::Point2f toCv(ofVec2f vec); -> not required as any object with x,y properties will do the job as an input\n// cv::Point3f toCv(ofVec3f vec); -> to be implemented later as OpenCV.js support for 3D improves\n// cv::Rect toCv(ofRectangle rect); -> not required as any object with x, y, width, height properties will do the job as an input\n// ofRectangle toOf(cv::Rect rect); -> not required as x, y, width, height properties can be accessed directly\n\n// ofPolyline toOf(cv::RotatedRect rect);\np5.cv.cvRotatedRectToPoints = function (rect) {\n  return cv.RotatedRect.points(rect);\n};\np5.cv.cvRotatedRectToVectors = function (rect) {\n  return p5.cv.cvRotatedRectToPoints.map((pt) => createVector(pt.x, pt.y));\n};\n// template <class T> inline ofPolyline toOf(const std::vector<cv::Point_<T> >& contour)\np5.cv.cvContourToPoints = function (contour) {\n  // TODO\n};\n/* // toOf functions\n  // TODO: add p5.cv.cvMatToImageData()\n  template <class T>\n  void toOf(cv::Mat mat, ofPixels_<T>& pixels) {\n    pixels.setFromExternalPixels(mat.ptr<T>(), mat.cols, mat.rows, mat.channels());\n  }\n  template <class T>\n  void toOf(cv::Mat mat, ofImage_<T>& img) {\n    imitate(img, mat);\n    toOf(mat, img.getPixels());\n  } */\n\np5.cv.cvPointToVector = function (point) {\n  // TODO: check if _setupDone and display a useful error otherwise\n  return createVector(point.x, point.y);\n};\n\np5.cv.cvRectVectorToArray = function (rectVector, array) {\n  let rectVectorSize = rectVector.size();\n  for (let i = 0; i < rectVectorSize; i++) {\n    array.push(rectVector.get(i));\n  }\n};\n\nclass Graph {\n  constructor(historyLength, minValue, maxValue) {\n    this.minValue = minValue;\n    this.maxValue = maxValue;\n    this.historyLength = historyLength;\n    this.history = new Float32Array(historyLength);\n    this.index = 0;\n  }\n\n  addSample(sample) {\n    this.history[this.index] = sample;\n    this.index = (this.index + 1) % this.historyLength;\n  }\n\n  getNormalizedSample(offset) {\n    var i = (this.index + offset) % this.historyLength;\n    var range = this.maxValue - this.minValue;\n    return (this.history[i] - this.minValue) / range;\n  }\n\n  draw(width, height) {\n    push();\n    noFill();\n    strokeWeight(1);\n    beginShape();\n    var range = this.maxValue - this.minValue;\n    for (var offset = 0; offset < this.historyLength; offset++) {\n      var i = (this.index + offset) % this.historyLength;\n      var x = (offset * width) / this.historyLength;\n      var normalized = (this.history[i] - this.minValue) / range;\n      var y = height - normalized * height;\n      vertex(x, y);\n    }\n    endShape();\n    pop();\n  }\n}\n","p5.cv.ZERO_SCALAR = [0, 0, 0, 0];\n// Helpers.h\n// TODO: test ! test ! test !\n//new cv.Mat(3, 3, cv.CV_32FC1,0)\np5.cv.makeMatrix = function(rotation, translation) {\n    let rot3x3;\n    if(rotation.rows == 3 && rotation.cols == 3) {\n        rot3x3 = rotation;\n    } else {\n        //rot3x3 = new cv.Mat();\n        rot3x3 = new cv.Mat(3, 3, cv.CV_32FC1, p5.cv.ZERO_SCALAR);\n        cv.Rodrigues(rotation, rot3x3);\n    }\n    let rm = rot3x3.data32F;\n    let tm = translation.data32F;\n    // TODO: is this ok ? should it be Float32Array instead ?\n    return [rm[0], rm[3], rm[6], 0.0,\n            rm[1], rm[4], rm[7], 0.0,\n            rm[2], rm[5], rm[8], 0.0,\n            tm[0], tm[1], tm[2], 1.0];\n}\n// TODO! test test test!\np5.cv.applyMatrix = function(transformationMatrix4x4){\n    applyMatrix(...transformationMatrix4x4);\n}\n\np5.cv.drawMat = function(sourceMat, x, y, width, height){\n    let p5Image = p5.cv.matToNewImage(sourceMat);\n    if(!width)  width  = sourceMat.cols;\n    if(!height) height = sourceMat.rows;\n    image(p5Image, x, y, width, height);\n    p5Image.remove();\n}\n\np5.cv.drawVectors = function(vectors, close = true){\n    let numVectors = vectors.length;\n    let vector;\n    beginShape();\n    for(let i = 0 ; i < numVectors; i++){\n        vector = vectors[i];\n        vertex(vector.x, vector.y);\n    }\n    if(close){\n        vector = vectors[0];\n        vertex(vector.x, vector.y);\n    }\n    endShape();\n}\n\np5.cv.drawRotatedRect = function(rotatedRect){\n    let center = rotatedRect.center;\n    let size = rotatedRect.size;\n    push();\n    translate(center.x, center.y);\n    rotate(radians(rotatedRect.angle));\n    rect(-size.width * 0.5, -size.height * 0.5, size.width, size.height);\n    pop();\n}\n\np5.cv.drawRotatedEllipse = function(rotatedEllipse){\n    let center = rotatedEllipse.center;\n    let size = rotatedEllipse.size;\n    push();\n    translate(center.x, center.y);\n    rotate(radians(rotatedEllipse.angle));\n    // p5.js uses ellipseMode(CENTER) by default\n    ellipse(0, 0, size.width, size.height);\n    pop();\n}\n\n\np5.cv.findMaxLocation = function(sourceMat) {\n    return cv.minMaxLoc(sourceMat).maxLoc;\n}\n// TODO: test: especially Mat type and data access\np5.cv.meanCols = function(sourceMat) {\n    let colMat = new cv.Mat(sourceMat.cols, 1, cv.CV_32FC1);\n    for(let i = 0; i < sourceMat.cols; i++) {\n        colMat.row(i).data32F[0] = cv.mean(sourceMat.col(i))[0];\n    }\t\n    return colMat;\n}\n\np5.cv.meanRows = function(sourceMat) {\n    let rowMat = new cv.Mat(sourceMat.rows, 1, cv.CV_32FC1);\n    for(let i = 0; i < sourceMat.cols; i++) {\n        rowMat.row(i).data32F[0] = cv.mean(sourceMat.row(i))[0];\n    }\t\n    return colMat;\n}\n\np5.cv.sumCols = function(sourceMat) {\n    let colMat = new cv.Mat(sourceMat.cols, 1, CV_32FC1);\n    for(let i = 0; i < sourceMat.cols; i++) {\n        // FIXME: cv.sum does not exist -> will col(i).data always work ?\n        colMat.row(i).data32F[0] = sourceMat.col(i).data.reduce((a,b,) => a+b);\n    }\t\n    return colMat;\n}\n\np5.cv.sumRows = function(sourceMat) {\n    let rowMat = new cv.Mat(sourceMat.rows, 1, CV_32FC1);\n    for(let i = 0; i < sourceMat.rows; i++) {\n        // FIXME: cv.sum does not exist -> will col(i).data always work ?\n        rowMat.row(i).data32F[0] = sourceMat.row(i).data.reduce((a,b,) => a+b);\n    }\t\n    return rowMat;\n}\n\np5.cv.minCols = function(sourceMat) {\n    let colMat = new cv.Mat(sourceMat.cols, 1, CV_32FC1);\n    for(let i = 0; i < sourceMat.cols; i++) {\n        colMat.row(i).data32F[0] = minMaxLoc(mat.col(i)).minVal;\n    }\n    return colMat;\n}\n\np5.cv.minRows = function(sourceMat) {\n    let rowMat = new cv.Mat(sourceMat.rows, 1, cv.CV_32FC1);\n    for(let i = 0; i < sourceMat.cols; i++) {\n        rowMat.row(i).data32F[0] = minMaxLoc(mat.row(i)).minVal;\n    }\t\n    return colMat;\n}\n\np5.cv.maxCols = function(sourceMat) {\n    let colMat = new cv.Mat(sourceMat.cols, 1, CV_32FC1);\n    for(let i = 0; i < sourceMat.cols; i++) {\n        colMat.row(i).data32F[0] = minMaxLoc(mat.col(i)).maxVal;\n    }\n    return colMat;\n}\n\np5.cv.maxRows = function(sourceMat) {\n    let rowMat = new cv.Mat(sourceMat.rows, 1, cv.CV_32FC1);\n    for(let i = 0; i < sourceMat.cols; i++) {\n        rowMat.row(i).data32F[0] = minMaxLoc(mat.row(i)).maxVal;\n    }\t\n    return colMat;\n}\n\np5.cv.findFirst = function(sourceMat, target) {\n    for(let i = 0; i < sourceMat.rows; i++) {\n        if(sourceMat.charAt(i) == target) {\n            return i;\n        }\n    }\n    return 0;\n}\n\np5.cv.findLast = function(sourceMat, target) {\n    for(let i = sourceMat.rows - 1; i >= 0 ; i--) {\n        if(sourceMat.charAt(i) == target) {\n            return i;\n        }\n    }\n    return 0;\n}\n\np5.cv.getBoundingBox = function(sourceMat, thresh, invert) {\n    let flags = (invert ? cv.THRESH_BINARY_INV : cv.THRESH_BINARY);\n    let box = new cv.Rect();\n    let rowMat = p5.cv.meanRows(sourceMat);\n    cv.threshold(rowMat, rowMat, thresh, 255, flags);\n    box.y = p5.cv.findFirst(rowMat, 255);\n    box.height = p5.cv.findLast(rowMat, 255);\n    box.height -= box.y;\n    \n    let colMat = p5.cv.meanCols(mat);\n    cv.threshold(colMat, colMat, thresh, 255, flags);\n    box.x = findFirst(colMat, 255);\n    box.width = findLast(colMat, 255);\n    box.width -= box.x;\n    return box;\n}\n\n// TODO: after October\n// // (nearest point) to the two given lines\n// template <class T>\n// cv::Point3_<T> intersectLineLine(cv::Point3_<T> lineStart1, cv::Point3_<T> lineEnd1, cv::Point3_<T> lineStart2, cv::Point3_<T> lineEnd2) {\n//     cv::Point3_<T> v1(lineEnd1 - lineStart1), v2(lineEnd2 - lineStart2);\n//     T v1v1 = v1.dot(v1), v2v2 = v2.dot(v2), v1v2 = v1.dot(v2), v2v1 = v2.dot(v1);\n//     cv::Mat_<T> lambda = (1. / (v1v1 * v2v2 - v1v2 * v1v2))\n//     * ((cv::Mat_<T>(2, 2) << v2v2, v1v2, v2v1, v1v1)\n//          * (cv::Mat_<T>(2, 1) << v1.dot(lineStart2 - lineStart1), v2.dot(lineStart1 - lineStart2)));\n//     return (1./2) * ((lineStart1 + v1 * lambda(0)) + (lineStart2 + v2 * lambda(1)));\n// }\n\n// (nearest point on a line) to the given point\n// template <class T>\n// cv::Point3_<T> intersectPointLine(cv::Point3_<T> point, cv::Point3_<T> lineStart, cv::Point3_<T> lineEnd) {\n//     cv::Point3_<T> ray = lineEnd - lineStart;\n//     T u = (point - lineStart).dot(ray) / ray.dot(ray);\n//     return lineStart + u * ray;\n// }\n\n// // (nearest point on a ray) to the given point\n// template <class T>\n// cv::Point3_<T> intersectPointRay(cv::Point3_<T> point, cv::Point3_<T> ray) {\n//     return ray * (point.dot(ray) / ray.dot(ray));\n// }\n\n// morphological thinning, also called skeletonization, strangely missing from opencv\n// here is a description of the algorithm http://homepages.inf.ed.ac.uk/rbf/HIPR2/thin.htm\n// template <class T>\n// void thin(T& img) {\n//     cv::Mat mat = toCv(img);\n//     int w = mat.cols, h = mat.rows;\n//     int ia1=-w-1,ia2=-w-0,ia3=-w+1,ib1=-0-1,ib3=-0+1,ic1=+w-1,ic2=+w-0,ic3=+w+1;\n//     unsigned char* p = mat.ptr<unsigned char>();\n//     vector<unsigned int> q;\n//     for(int y = 1; y + 1 < h; y++) {\n//         for(int x = 1; x + 1 < w; x++) {\n//             int i = y * w + x;\n//             if(p[i]) {\n//                 q.push_back(i);\n//             }\n//         }\n//     }\n//     int n = q.size();\t\n//     for(int i=0;i<n;i++){int j=q[i];if(!p[j+ia1]&&!p[j+ia2]&&!p[j+ia3]&&p[j+ic1]&&p[j+ic2]&&p[j+ic3]){p[j]=0;}}\n//     for(int i=0;i<n;i++){int j=q[i];if(!p[j+ia3]&&!p[j+ib3]&&!p[j+ic3]&&p[j+ia1]&&p[j+ib1]&&p[j+ic1]){p[j]=0;}}\n//     for(int i=0;i<n;i++){int j=q[i];if(!p[j+ic1]&&!p[j+ic2]&&!p[j+ic3]&&p[j+ia1]&&p[j+ia2]&&p[j+ia3]){p[j]=0;}}\n//     for(int i=0;i<n;i++){int j=q[i];if(!p[j+ia1]&&!p[j+ib1]&&!p[j+ic1]&&p[j+ia3]&&p[j+ib3]&&p[j+ic3]){p[j]=0;}}\n//     for(int i=0;i<n;i++){int j=q[i];if(!p[j+ia2]&&!p[j+ia3]&&!p[j+ib3]&&p[j+ib1]&&p[j+ic2]){p[j]=0;}}\n//     for(int i=0;i<n;i++){int j=q[i];if(!p[j+ib3]&&!p[j+ic3]&&!p[j+ic2]&&p[j+ib1]&&p[j+ia2]){p[j]=0;}}\n//     for(int i=0;i<n;i++){int j=q[i];if(!p[j+ic2]&&!p[j+ic1]&&!p[j+ib1]&&p[j+ia2]&&p[j+ib3]){p[j]=0;}}\n//     for(int i=0;i<n;i++){int j=q[i];if(!p[j+ib1]&&!p[j+ia1]&&!p[j+ia2]&&p[j+ic2]&&p[j+ib3]){p[j]=0;}}\n// }\n// additionally: https://github.com/LingDong-/skeletonization-js\n\n// given a vector of lines, this function will find the average angle\np5.cv.weightedAverageAngle = function(linesMat) {\n    let angleSum = 0;\n    let weights = 0;\n    for(let i = 0; i < linesMat.rows; i++) {\n        let start = new cv.Point(linesMat.data32S[i * 4]    , linesMat.data32S[i * 4 + 1]);\n        let end   = new cv.Point(linesMat.data32S[i * 4 + 2], linesMat.data32S[i * 4 + 3]);\n        let diff  = p5.Vector.sub(end, start);\n        let length = diff.mag();\n        let weight = length * length;\n        let angle = atan2(diff.y, diff.x);\n        angleSum += angle * weight;\n        weights += weight;\n    }\n    return angleSum / weights;\n}\n\n// finds the average angle of hough lines, unrotates by that amount and\n// returns the average rotation. you can supply your own thresholded image\n// for hough lines, or let it run canny detection for you.\np5.cv.autorotate = function(sourceMat, destinationMat, threshold1 = 50, threshold2 = 200) {\n    let threshMat = new cv.Mat();\n    cv.Canny(sourceMat, threshMat, threshold1, threshold2);\n    return autorotate(sourceMat, threshMat, destinationMat);\n}\n\np5.cv.autorotate = function(sourceMat, threshMat, destinationMat) {\n    p5.cv.imitate(destinationMat, sourceMat);\n    let lines = new cv.Mat();\n    let distanceResolution = 1.0;\n    // FIXME check if this is correct: used to be CV_PI\n    let angleResolution = PI / 180;\n    // these three values are just heuristics that have worked for me\n    let voteThreshold = 10;\n    let minLineLength = (srcMat.rows + srcMat.cols) / 8;\n    let maxLineGap = 3;\n    cv.HoughLinesP(threshMat, lines, distanceResolution, angleResolution, voteThreshold, minLineLength, maxLineGap);\n    let rotationAmount = ofRadToDeg(weightedAverageAngle(lines));\n    p5.cv.rotate(sourceMat, destinationMat, rotationAmount);\n    return rotationAmount;\n}\n\n// OCT ?\n// p5.cv.getConvexPolygon(convexHull, targetPoints) {\n//     let result = convexHull;\n    \n//     const maxIterations = 16;\n//     const infinity = Number.POSITIVE_INFINITY;\n//     let minEpsilon = 0;\n//     let maxEpsilon = Number.POSITIVE_INFINITY;\n//     let curEpsilon = 16; // good initial guess\n    \n//     // unbounded binary search to simplify the convex hull until it's targetPoints\n//     if(result.size() > targetPoints) {\n//         for(let i = 0; i < maxIterations; i++) {\n//             cv.approxPolyDP(Mat(convexHull), result, curEpsilon, true);\n//             if(result.size() == targetPoints) {\n//                 break;\n//             }\n//             if(result.size() > targetPoints) {\n//                 minEpsilon = curEpsilon;\n//                 if(maxEpsilon == infinity) {\n//                     curEpsilon = curEpsilon *  2;\n//                 } else {\n//                     curEpsilon = (maxEpsilon + minEpsilon) / 2;\n//                 }\n//             }\n//             if(result.size() < targetPoints) {\n//                 maxEpsilon = curEpsilon;\n//                 curEpsilon = (maxEpsilon + minEpsilon) / 2;\n//             }\n//         }\n//     }\n    \n//     return result;\n// }\n\n// TODO: rename these to imageToCvMat / cvMatToImage\np5.cv.imageToNewMat = function(sourceImage){\n// TODO: args safety check\n    return cv.imread(sourceImage.canvas);\n}\n\np5.cv.imageToMat = function(sourceImage, cvMat){\n    let sourceWidth  = sourceImage.width;\n    let sourceHeight = sourceImage.height;\n    if(!p5.cv.getAllocated(cvMat)){\n        p5.cv.allocate(cvMat, sourceWidth, sourceHeight, cv.CV_8UC4);\n    }\n    let numBytes = sourceWidth * sourceHeight * 4;\n    let data = sourceImage.canvas.getContext('2d').getImageData(0, 0, sourceWidth, sourceHeight).data\n    for(let i = 0 ; i < numBytes; i++){\n        cvMat.data[i] = data[i];\n    }\n}\n\np5.cv.matToImage = function(sourceMat, destinationImage){\n// TODO: args safety check\n    cv.imshow(destinationImage.canvas, sourceMat);\n}\n\np5.cv.matToNewImage = function(sourceMat){\n    let destinationImage = createImage(sourceMat.cols,sourceMat.rows);\n    cv.imshow(destinationImage.canvas, sourceMat);\n    return destinationImage;\n}\n\np5.cv.areSamesize = function(matA, matB){\n    return matA.rows === matB.rows && matA.cols === matB.cols;\n}\n\ncv.Scalar.sub = function(a, b){\n    return [a[0] - b[0],\n            a[1] - b[1],\n            a[2] - b[2],\n            a[3] - b[3]];\n}\n\ncv.Scalar.add = function(a, b){\n    return [a[0] + b[0],\n            a[1] + b[1],\n            a[2] + b[2],\n            a[3] + b[3]];\n}\n\ncv.Point.sub = function(a, b){\n    return new cv.Point(a.x - b.x, a.x - b.x);\n}\n\ncv.Point.add = function(a, b){\n    return new cv.Point(a.x + b.x, a.x + b.x);\n}\n\n","// wrapThree are based on functions that operate on three Mat objects.\n// the first two are inputs, and the third is an output. for example,\n// the min() function: min(x, y, result) will calculate the per-element min\n// between x and y, and store that in result. both y and result need to\n// match x in dimensions and type. while wrapThree functions will use\n// imitate() to make sure your data is allocated correctly, you shouldn't\n// epect the function to behave properly if you haven't already allocated\n// your y argument. in general, OF images contain noise when newly allocated\n// so the result will also contain that noise.\n// #define wrapThree(name) \\\n// template <class X, class Y, class Result>\\\n// void name(X& x, Y& y, Result& result) {\\\n// imitate(y, x);\\\n// imitate(result, x);\\\n// cv::Mat xMat = toCv(x), yMat = toCv(y);\\\n// cv::Mat resultMat = toCv(result);\\\n// cv::name(xMat, yMat, resultMat);\\\n// }\n\n// wrapThree(max);\n// wrapThree(min);\n// wrapThree(multiply);\n// wrapThree(divide);\n// wrapThree(add);\n// wrapThree(subtract);\n// wrapThree(absdiff);\n// wrapThree(bitwise_and);\n// wrapThree(bitwise_or);\n// wrapThree(bitwise_xor);\n\n// Wrappers.h\np5.cv.invertTo = function (sourceMat, destinationMat) {\n  // TODO: args safety check\n  cv.bitwise_not(sourceMat, destinationMat);\n};\n// inverting non-floating point images is a just a bitwise not operation\np5.cv.invert = function (sourceMat) {\n  // TODO: args safety check\n  p5.cv.invertTo(sourceMat, sourceMat);\n};\n// also useful for taking the average/mixing two images\np5.cv.lerp = function (lerpFromMat, lerpToMat, lerpResult, amount) {\n  // TODO: args safety check (including constraining amount)\n  if (lerpToMat.cols === 0) {\n    lerpFromMat.copyTo(lerpResult);\n  } else if (lerpFromMat.cols === 0) {\n    lerpToMat.copyTo(lerpResult);\n  } else {\n    cv.addWeighted(\n      lerpFromMat,\n      amount,\n      lerpToMat,\n      1.0 - amount,\n      0.0,\n      lerpResult\n    );\n  }\n};\np5.cv.accumulate = function (newMat, accumulatorMat) {\n  // FIXME: handle type differences, currently assumes sourceMat and destinationMat are the same type\n  cv.add(newMat, accumulatorMat, accumulatorMat);\n};\np5.cv.accumulateWeighted = function (\n  newMat,\n  accumulatorMat,\n  alpha,\n  mask = null\n) {\n  // p5.cv.accumulate(newMat, accumulatorMat);\n  // imageA = alpha*imageA + (1-alpha)*imageB;\n  p5.cv.lerp(accumulatorMat, newMat, accumulatorMat, alpha);\n  // cv.addWeighted(sourceMat, alpha, destinationMat, 1.0 - alpha, 0.0, destinationMat);\n  // acc(x,y) = (1 − α) ⋅ acc(x, y) + α ⋅ image(x, y)\n  // cv.addWeighted(accumulatorMat, alpha, newMat, 1.0 - alpha, 0.0, accumulatorMat);\n};\n// normalize the min/max to [0, max for this type] out of place\np5.cv.normalizeTo = function (sourceMat, destinationMat) {\n  // TODO: args safety check\n  cv.normalize(\n    sourceMat,\n    destinationMat,\n    0,\n    p5.cv.getMaxValForMat(destinationMat),\n    cv.NORM_MINMAX\n  );\n};\n// TODO: test more\n// normalize the min/max to [0, max for this type] in place\np5.cv.normalize = function (sourceMat) {\n  // TODO: args safety check\n  p5.cv.normalizeTo(sourceMat, sourceMat);\n};\n// TODO: test if invert does anything\n// threshold out of place\np5.cv.thresholdTo = function (\n  sourceMat,\n  destinationMat,\n  thresholdValue,\n  invert = false\n) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  let thresholdType = invert ? cv.THRESH_BINARY_INV : cv.THRESH_BINARY;\n  let maxVal = p5.cv.getMaxValForMat(destinationMat);\n  //cv.threshold(sourceMat, destinationMat, thresholdValue, maxVal, thresholdType);\n  cv.threshold(\n    sourceMat,\n    destinationMat,\n    thresholdValue,\n    maxVal,\n    cv.THRESH_BINARY\n  );\n};\n// threshold in place\np5.cv.threshold = function (sourceMat, thresholdValue, invert = false) {\n  p5.cv.thresholdTo(sourceMat, sourceMat, thresholdValue, invert);\n};\n// cache reusable point\np5.cv.MINUS_ONE_POINT = new cv.Point(-1, -1);\n// FIXME: load cv nicely and cache this\n// p5.cv.DEFAULT_KERNEL_MAT = new cv.Mat();\n// erode out of place\np5.cv.erodeTo = function (sourceMat, destinationMat, iterations = 1) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  cv.erode(\n    sourceMat,\n    destinationMat,\n    new cv.Mat(),\n    p5.cv.MINUS_ONE_POINT,\n    iterations\n  );\n};\n// erode in place\np5.cv.erode = function (sourceMat, iterations = 1) {\n  p5.cv.erodeTo(sourceMat, sourceMat, iterations);\n};\n\n// dilate out of place\np5.cv.dilateTo = function (sourceMat, destinationMat, iterations = 1) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  cv.dilate(\n    sourceMat,\n    destinationMat,\n    new cv.Mat(),\n    p5.cv.MINUS_ONE_POINT,\n    iterations\n  );\n};\n\n// dilate in place\np5.cv.dilate = function (sourceMat, iterations = 1) {\n  p5.cv.dilateTo(sourceMat, sourceMat, iterations);\n};\n\n// automatic threshold (grayscale 8-bit only) out of place\np5.cv.autothresholdTo = function (sourceMat, destinationMat, invert = false) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  let flags =\n    cv.THRESH_OTSU | (invert ? cv.THRESH_BINARY_INV : cv.THRESH_BINARY);\n  cv.threshold(sourceMat, destinationMat, 0, 255, flags);\n};\n\n// automatic threshold (grayscale 8-bit only) in place\np5.cv.autothreshold = function (sourceMat, invert = false) {\n  p5.cv.autothresholdTo(sourceMat, sourceMat, invert);\n};\n\n// CV_RGB2GRAY, CV_HSV2RGB, etc. with [RGB, BGR, GRAY, HSV, HLS, XYZ, YCrCb, Lab, Luv]\n// you can convert whole images...\np5.cv.convertColor = function (sourceMat, destinationMat, code) {\n  // cvtColor allocates Mat for you, but we need this to handle ofImage etc.\n  let targetChannels = p5.cv.getTargetChannelsFromCode(code);\n  p5.cv.imitate(\n    destinationMat,\n    sourceMat,\n    p5.cv.getCvImageType(targetChannels, p5.cv.getDepthForMat(sourceMat))\n  );\n  cv.cvtColor(sourceMat, destinationMat, code);\n};\n// ...or single colors.\n// TODO: ask Golan about a decent way to tackle this.\n// return color (but have it clamped to 0-255) ?\n// test under different colorMode options\n// !!!!note it converts RGB, not RGB\np5.cv.convertSingleColor = function (p5Color, code) {\n  let mat = cv.Mat.zeros(1, 1, cv.CV_8UC3);\n\n  mat.data[0] = p5Color._getRed();\n  mat.data[1] = p5Color._getGreen();\n  mat.data[2] = p5Color._getBlue();\n\n  cv.cvtColor(mat, mat, code);\n  let data = Array.from(mat.data);\n  // add alpha back in\n  data.push(p5Color._getAlpha());\n  return data;\n};\n\n// a common cv task is to convert something to grayscale. this function will\n// do that quickly for RGBA, RGB, and 1-channel images.\np5.cv.copyGray = function (sourceMat, destinationMat) {\n  let channels = p5.cv.getChannelsForMat(sourceMat);\n  if (channels == 4) {\n    p5.cv.convertColor(sourceMat, destinationMat, cv.COLOR_RGBA2GRAY);\n  } else if (channels == 3) {\n    p5.cv.convertColor(sourceMat, destinationMat, cv.COLOR_RGB2GRAY);\n  } else if (channels == 1) {\n    sourceMat.copyTo(destinationMat);\n  }\n};\n\np5.cv.forceOdd = function (x) {\n  return Math.floor(x / 2) * 2 + 1;\n};\n\n// box blur\np5.cv.blurTo = function (sourceMat, destinationMat, size) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  size = p5.cv.forceOdd(size);\n  cv.blur(sourceMat, destinationMat, new cv.Size(size, size));\n};\n// in-place box blur\np5.cv.blur = function (sourceMat, size) {\n  p5.cv.blurTo(sourceMat, sourceMat, size);\n};\n\n// Gaussian blur\np5.cv.GaussianBlurTo = function (sourceMat, destinationMat, size) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  size = p5.cv.forceOdd(size);\n  cv.GaussianBlur(sourceMat, destinationMat, new cv.Size(size, size), 0, 0);\n};\n\n// in-place Gaussian blur\np5.cv.GaussianBlur = function (sourceMat, size) {\n  p5.cv.GaussianBlurTo(sourceMat, sourceMat, size);\n};\n\n// Median blur\np5.cv.medianBlurTo = function (sourceMat, destinationMat, size) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  size = p5.cv.forceOdd(size);\n  cv.medianBlur(sourceMat, destinationMat, size);\n};\n\n// in-place Median blur\np5.cv.medianBlur = function (sourceMat, size) {\n  p5.cv.medianBlurTo(sourceMat, sourceMat, size);\n};\n\n// histogram equalization, adds support for color images\np5.cv.equalizeHistTo = function (sourceMat, destinationMat) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  if (sourceMat.channels() > 1) {\n    let sourceChannels = new cv.MatVector();\n    let destinationChannels = new cv.MatVector();\n    split(sourceMat, sourceChannels);\n    split(destinationMat, destinationChannels);\n    for (let i = 0; i < sourceChannels.size(); i++) {\n      cv.equalizeHist(sourceChannels.get(i), destinationChannels.get(i));\n    }\n    cv.merge(destinationChannels, destinationChannels);\n  } else {\n    cv.equalizeHist(sourceMat, destinationMat);\n  }\n};\n\np5.cv.equalizeHist = function (sourceMat) {\n  p5.cv.equalizeHistTo(sourceMat, sourceMat);\n};\n\n// Canny edge detection assumes your input and output are grayscale 8-bit\n// example thresholds might be 0,30 or 50,200\n// TODO: ask Golan if there's a reason to add an in-place version\np5.cv.Canny = function (\n  sourceMat,\n  destinationMat,\n  threshold1,\n  threshold2,\n  apertureSize = 3,\n  L2gradient = false\n) {\n  p5.cv.imitate(destinationMat, sourceMat, cv.CV_8UC1);\n  cv.Canny(\n    sourceMat,\n    destinationMat,\n    threshold1,\n    threshold2,\n    apertureSize,\n    L2gradient\n  );\n};\n\n// Sobel edge detection\np5.cv.Sobel = function (\n  sourceMat,\n  destinationMat,\n  ddepth = -1,\n  dx = 1,\n  dy = 1,\n  ksize = 3,\n  scale = 1,\n  delta = 0,\n  borderType = cv.BORDER_DEFAULT\n) {\n  p5.cv.imitate(destinationMat, sourceMat, cv.CV_8UC1);\n  cv.Sobel(\n    sourceMat,\n    destinationMat,\n    ddepth,\n    dx,\n    dy,\n    ksize,\n    scale,\n    delta,\n    borderType\n  );\n};\n// CLD missing at the moment\n\n// TODO: test ! test ! test!\n// dst does not imitate src\np5.cv.warpPerspective = function (\n  sourceMat,\n  destinationMat,\n  destinationPoints,\n  flags = cv.INTER_LINEAR\n) {\n  // TODO validate args !!!\n  let w = sourceMat.cols;\n  let h = sourceMat.rows;\n  let sourcePoints = cv.matFromArray(4, 1, cv.CV_32FC2, [\n    0,\n    0,\n    w,\n    0,\n    w,\n    h,\n    0,\n    h,\n  ]);\n  if (destinationPoints instanceof Array) {\n    // FIXME: maybe convert this from [x1,y1,x2,y2,x3,y3...] to [{x:0,y:0}...] or [p5.Vector(),...]\n    destinationPoints = cv.matFromArray(4, 1, cv.CV_32FC2, destinationPoints);\n  }\n  let transform = cv.getPerspectiveTransform(sourcePoints, destinationPoints);\n  cv.warpPerspective(\n    sourceMat,\n    destinationMat,\n    transform,\n    destinationMat.size(),\n    flags\n  );\n};\n// dst does not imitate src\np5.cv.unwarpPerspective = function (\n  sourceMat,\n  destinationMat,\n  sourcePoints,\n  flags = cv.INTER_LINEAR\n) {\n  let w = dstMat.cols;\n  let h = dstMat.rows;\n  let destinationPoints = cv.matFromArray(4, 1, cv.CV_32FC2, [\n    0,\n    0,\n    w,\n    0,\n    w,\n    h,\n    0,\n    h,\n  ]);\n\n  let transform = cv.getPerspectiveTransform(sourcePoints, destinationPoints);\n  cv.warpPerspective(\n    sourceMat,\n    destinationMat,\n    transform,\n    destinationMat.size(),\n    flags\n  );\n};\n\n// dst does not imitate src\np5.cv.warpPerspectiveFromTranform = function (\n  sourceMat,\n  destinationMat,\n  transform,\n  flags = cv.INTER_LINEAR\n) {\n  cv.warpPerspective(\n    sourceMat,\n    destinationMat,\n    transform,\n    destinationMat.size(),\n    flags\n  );\n};\n\n// also: INTER_NEAREST, INTER_AREA, INTER_CUBIC, INTER_LANCZOS4\np5.cv.resizeTo = function (\n  sourceMat,\n  destinationMat,\n  interpolation = cv.INTER_LINEAR\n) {\n  // TODO: validation args (especially destination Mat (e.g. width != 0, height != 0))\n  cv.resize(\n    sourceMat,\n    destinationMat,\n    destinationMat.size(),\n    0,\n    0,\n    interpolation\n  );\n};\n\n// also: INTER_NEAREST, INTER_AREA, INTER_CUBIC, INTER_LANCZOS4\np5.cv.resizeToScale = function (\n  sourceMat,\n  destinationMat,\n  xScale,\n  yScale,\n  interpolation = cv.INTER_LINEAR\n) {\n  let dstWidth = Math.floor(p5.cv.getWidth(sourceMat) * xScale),\n    dstHeight = Math.floor(p5.cv.getHeight(sourceMat) * yScale);\n  if (\n    p5.cv.getWidth(destinationMat) != dstWidth ||\n    p5.cv.getHeight(destinationMat) != dstHeight\n  ) {\n    p5.cv.allocate(\n      destinationMat,\n      dstWidth,\n      dstHeight,\n      p5.cv.getCvImageType(sourceMat)\n    );\n  }\n  cv.resize(\n    sourceMat,\n    destinationMat,\n    { width: dstWidth, height: dstHeight },\n    interpolation\n  );\n};\n\np5.cv.resizeToDimensions = function (\n  sourceMat,\n  destinationMat,\n  dstWidth,\n  dstHeight,\n  interpolation = cv.INTER_LINEAR\n) {\n  if (\n    p5.cv.getWidth(destinationMat) != dstWidth ||\n    p5.cv.getHeight(destinationMat) != dstHeight\n  ) {\n    p5.cv.allocate(\n      destinationMat,\n      dstWidth,\n      dstHeight,\n      p5.cv.getCvImageType(sourceMat)\n    );\n  }\n  cv.resize(\n    sourceMat,\n    destinationMat,\n    { width: dstWidth, height: dstHeight },\n    interpolation\n  );\n};\n\np5.cv.cvPointsToJS = function (mat) {\n  let result = [];\n  for (let i = 0; i < mat.rows; i++) {\n    result.push({ x: mat.data32S[i * 2], y: mat.data32S[i * 2 + 1] });\n  }\n  return result;\n};\n\np5.cv.cvPointsToVectors = function (mat) {\n  let result = [];\n  for (let i = 0; i < mat.rows; i++) {\n    result.push(createVector(mat.data32S[i * 2], mat.data32S[i * 2 + 1]));\n  }\n  return result;\n};\n\np5.cv.cvFeaturesToPoints = function (mat) {\n  let result = [];\n  for (let i = 0; i < mat.rows; i++) {\n    result.push({ x: mat.data32F[i * 2], y: mat.data32F[i * 2 + 1] });\n  }\n  return result;\n};\n\np5.cv.getFeatureAsPoint = function (mat, index) {\n  return { x: mat.data32F[index * 2], y: mat.data32F[index * 2 + 1] };\n};\n\np5.cv.cvLineToJS = function (mat) {\n  let result = [];\n  for (let i = 0; i < mat.rows; i++) {\n    result.push({ x: mat.data32F[i * 2], y: mat.data32F[i * 2 + 1] });\n  }\n  return result;\n};\n\np5.cv.cvLineToVectors = function (mat) {\n  let result = [];\n  for (let i = 0; i < mat.rows; i++) {\n    result.push(createVector(mat.data32F[i * 2], mat.data32F[i * 2 + 1]));\n  }\n  return result;\n};\n\np5.cv.convexHullFromMat = function (contourMat) {\n  let hull = new cv.Mat();\n  cv.convexHull(contourMat, hull);\n  return p5.cv.cvPointsToJS(hull);\n};\n\np5.cv.convexHull = function (vectors) {\n  let contour = p5.cv.vectorsToCvContour(vectors);\n  return p5.cv.convexHullFromMat(contour);\n};\n\np5.cv.convexityDefectsCv = function (contourMat) {\n  let hull = new cv.Mat();\n  let defects = new cv.Mat();\n  cv.convexHull(contourMat, hull, false, false);\n  cv.convexityDefects(contourMat, hull, defects);\n  return defects;\n};\n\np5.cv.convexityDefectsFromVectors = function (vectors) {\n  return p5.cv.cvPointsToVectors(\n    p5.cv.convexityDefectsCv(p5.cv.vectorsToCvContour(vectors))\n  );\n};\n\np5.cv.minAreaRectFromVectors = function (vectors) {\n  return cv.minAreaRect(p5.cv.vectorsToCvContour(vectors));\n};\n\np5.cv.fitEllipseFromVectors = function (vectors) {\n  return cv.fitEllipse(p5.cv.vectorsToCvContour(vectors));\n};\n// TODO: test more, fix as needed\np5.cv.fitLineFromVectors = function (vectors, height) {\n  let line = new cv.Mat();\n  cv.fitLine(\n    p5.cv.vectorsToCvContour(vectors),\n    line,\n    cv.DIST_L2,\n    0,\n    0.01,\n    0.01\n  );\n  // return p5.cv.cvLineToVectors(line);\n  // if(frameCount == 75){\n  //   console.log(line);\n  // }\n\n  let vx = line.data32F[0];\n  let vy = line.data32F[1];\n  let x = line.data32F[2];\n  let y = line.data32F[3];\n  let lefty = Math.round((-x * vy) / vx + y);\n  let righty = Math.round(((height - x) * vy) / vx + y);\n  let point1 = createVector(height - 1, righty);\n  let point2 = createVector(0, lefty);\n  return [point1, point2];\n};\n\n// TODO: test\n// kind of obscure function, draws filled polygons on the CPU\np5.cv.fillPoly = function (points, destinationMat) {\n  let numPoints = [points.length];\n  destinationMat.setTo(p5.cv.ZERO_SCALAR);\n  cv.fillPoly(destinationMat, points, numPoints, 1, [255, 255, 255, 255]);\n};\n\np5.cv.FLIP_HORIZONTAL = 1;\np5.cv.FLIP_VERTICAL = 0;\np5.cv.FLIP_BOTH = -1;\n\np5.cv.flipTo = function (sourceMat, destinationMat, code) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  cv.flip(sourceMat, destinationMat, code);\n};\n\np5.cv.flip = function (sourceMat, code) {\n  p5.cv.flipTo(sourceMat, sourceMat, code);\n};\n\n// if you're doing the same rotation multiple times, it's better to precompute\n// the displacement and use remap.\np5.cv.rotateTo = function (\n  sourceMat,\n  destinationMat,\n  angle,\n  fill = [0, 0, 0, 255],\n  interpolation = cv.INTER_LINEAR\n) {\n  p5.cv.imitate(destinationMat, sourceMat);\n  let center = new cv.Point(\n    Math.floor(sourceMat.cols * 0.5),\n    Math.floor(sourceMat.rows * 0.5)\n  );\n  let rotationMatrix = cv.getRotationMatrix2D(center, angle, 1);\n  cv.warpAffine(\n    sourceMat,\n    destinationMat,\n    rotationMatrix,\n    sourceMat.size(),\n    interpolation,\n    cv.BORDER_CONSTANT,\n    fill\n  );\n};\n\np5.cv.rotate = function (\n  sourceMat,\n  angle,\n  fill = [0, 0, 0, 255],\n  interpolation = cv.INTER_LINEAR\n) {\n  p5.cv.rotateTo(sourceMat, sourceMat, angle, fill, interpolation);\n};\n\n// efficient version of rotate that only operates on 0, 90, 180, 270 degrees\n// the output is allocated to contain all pixels of the input.\n// TODO: check if allocate calls are actually required!!!\np5.cv.rotate90To = function (sourceMat, destinationMat, angle) {\n  if (angle == 0) {\n    sourceMat.copyTo(destinationMat);\n  } else if (angle == 90) {\n    // p5.cv.allocate(destinationMat, sourceMat.rows, sourceMat.cols, sourceMat.type());\n    cv.transpose(sourceMat, destinationMat);\n    cv.flip(sourceMat, destinationMat, p5.cv.FLIP_HORIZONTAL);\n  } else if (angle == 180) {\n    p5.cv.imitate(destinationMat, sourceMat);\n    cv.flip(sourceMat, destinationMat, p5.cv.FLIP_BOTH);\n  } else if (angle == 270) {\n    // p5.cv.allocate(destinationMat, sourceMat.rows, sourceMat.cols, sourceMat.type());\n    cv.transpose(sourceMat, destinationMat);\n    // cv.flip(sourceMat, destinationMat, p5.cv.FLIP_VERTICAL);\n  }\n};\n\np5.cv.rotate90 = function (sourceMat, angle) {\n  p5.cv.rotate90To(sourceMat, sourceMat, angle);\n};\n\np5.cv.transposeTo = function (sourceMat, destinationMat) {\n  //p5.cv.allocate(destinationMat, sourceMat.rows, sourceMat.cols, sourceMat.type());\n  cv.transpose(sourceMat, destinationMat);\n};\n\np5.cv.transpose = function (sourceMat) {\n  p5.cv.transposeTo(sourceMat, sourceMat);\n};\n\np5.cv.swap = function (a, b) {\n  let temp = a.clone();\n  b.copyTo(a);\n  temp.copyTo(b);\n  temp.delete();\n};\n","p5.cv.trackingDistanceRect = function (a, b) {\n  let dx = a.x + a.width * 0.5 - (b.x + b.width * 0.5);\n  let dy = a.y + a.height * 0.5 - (b.y + b.height * 0.5);\n  let dw = a.width - b.width;\n  let dh = a.height - b.height;\n  let pd = Math.sqrt(dx * dx + dy * dy);\n  let sd = Math.sqrt(dw * dw + dh * dh);\n  return pd + sd;\n};\n\np5.cv.trackingDistancePoint = function (a, b) {\n  return dist(a.x, a.y, b.x, b.y);\n};\n\np5.cv.isPoint = function (pt) {\n  return 'x' in pt && 'y' in pt && !('width' in pt);\n};\n\np5.cv.isRect = function (pt) {\n  return 'x' in pt && 'y' in pt && 'width' in pt && 'height' in pt;\n};\n\np5.cv.trackingDistance = function (a, b) {\n  if (p5.cv.isPoint(a) && p5.cv.isPoint(b)) {\n    return p5.cv.trackingDistancePoint(a, b);\n  }\n  if (p5.cv.isRect(a) && p5.cv.isRect(b)) {\n    return p5.cv.trackingDistanceRect(a, b);\n  }\n  console.warn(\n    'invalid input: currently supporting only points(e.g. {x:0,y:0}) and rectangles({x:0,y:0,width:10,height:10})'\n  );\n  return -1;\n};\n\nclass TrackedObject {\n  initFromObject(object, label, index) {\n    this.lastSeen = 0;\n    this.label = label;\n    this.age = 0;\n    this.index = index;\n    this.object = object;\n    return this;\n  }\n\n  initFromPreviousObject(object, previous, index) {\n    this.lastSeen = 0;\n    this.label = previous.label;\n    this.age = previous.age;\n    this.index = index;\n    this.object = object;\n    return this;\n  }\n\n  copyFrom(old) {\n    this.lastSeen = old.lastSeen;\n    this.label = old.label;\n    this.age = old.age;\n    this.index = -1;\n    this.object = old.object;\n    return this;\n  }\n\n  timeStep(visible) {\n    this.age++;\n    if (!visible) {\n      this.lastSeen++;\n    }\n  }\n\n  getLastSeen() {\n    return this.lastSeen;\n  }\n\n  getAge() {\n    return this.age;\n  }\n\n  getLabel() {\n    return this.label;\n  }\n\n  getIndex() {\n    return this.index;\n  }\n}\n\nclass Tracker {\n  constructor() {\n    this.previous = [];\n    this.current = [];\n    this.currentLabels = [];\n    this.previousLabels = [];\n    this.newLabels = [];\n    this.deadLabels = [];\n\n    this.previousLabelMap = new Map();\n    this.currentLabelMap = new Map();\n\n    this.persistence = 15;\n    this.curLabel = 0;\n\n    this.maximumDistance = 64;\n  }\n\n  getNewLabel() {\n    return this.curLabel++;\n  }\n\n  setPersistance(persistance) {\n    this.persistance = persistance;\n  }\n\n  setMaximumDistance(maximumDistance) {\n    this.maximumDistance = maximumDistance;\n  }\n\n  sortByDistance(a, b) {\n    if (a.distance > b.distance) return 1;\n    if (a.distance < b.distance) return -1;\n    return 0;\n  }\n\n  track(objects) {\n    // TODO: check if this is mean to update reference or copy values\n    // this.previous = this.current;\n    this.previous = [].concat(this.current);\n\n    let n = objects.length;\n    let m = this.previous.length;\n\n    // matchPair = {index1:index2};\n    // matchDistancePair = {pair: matchPair, distance: dist}\n    let all = [];\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n        let curDistance = p5.cv.trackingDistance(\n          objects[i],\n          this.previous[j].object\n        );\n        if (curDistance < this.maximumDistance) {\n          all.push({ pair: [i, j], distance: curDistance });\n        }\n      }\n    }\n\n    all.sort(this.sortByDistance);\n\n    // previousLabels = currentLabels;\n    this.previousLabels = [].concat(this.currentLabels);\n    this.currentLabels = new Array(n);\n    this.current.length = 0;\n\n    let matchedObjects = new Array(n).fill(false);\n    let matchedPrevious = new Array(m).fill(false);\n    // walk through matches in order\n    let allSize = all.length;\n    for (let k = 0; k < allSize; k++) {\n      let match = all[k].pair;\n      let i = match[0];\n      let j = match[1];\n      // only use match if both objects are unmatched, lastSeen is set to 0\n      if (!matchedObjects[i] && !matchedPrevious[j]) {\n        matchedObjects[i] = true;\n        matchedPrevious[j] = true;\n        let index = this.current.length;\n        let newFromPrevious = new TrackedObject().initFromPreviousObject(\n          objects[i],\n          this.previous[j],\n          index\n        );\n        this.current.push(newFromPrevious);\n        newFromPrevious.timeStep(true);\n        this.currentLabels[i] = newFromPrevious.getLabel();\n      }\n    }\n\n    // create new labels for new unmatched objects, lastSeen is set to 0\n    this.newLabels.length = 0;\n    for (let i = 0; i < n; i++) {\n      if (!matchedObjects[i]) {\n        let curLabel = this.getNewLabel();\n        let index = this.current.length;\n        let newWithLabel = new TrackedObject().initFromObject(\n          objects[i],\n          curLabel,\n          index\n        );\n        this.current.push(newWithLabel);\n        newWithLabel.timeStep(true);\n        this.currentLabels[i] = curLabel;\n        this.newLabels.push(curLabel);\n      }\n    }\n\n    // copy old unmatched objects if young enough, lastSeen is increased\n    this.deadLabels.length = 0;\n    for (let j = 0; j < m; j++) {\n      if (!matchedPrevious[j]) {\n        if (this.previous[j].getLastSeen() < this.persistence) {\n          this.current.push(this.previous[j]);\n          this.current[this.current.length - 1].timeStep(false);\n        }\n        this.deadLabels.push(this.previous[j].getLabel());\n      }\n    }\n\n    // build label maps\n    this.currentLabelMap.clear();\n    let currentSize = this.current.length;\n    for (let i = 0; i < currentSize; i++) {\n      let label = this.current[i].getLabel();\n      this.currentLabelMap.set(label, this.current[i]);\n    }\n    this.previousLabelMap.clear();\n    let previousSize = this.previous.length;\n    for (let i = 0; i < previousSize; i++) {\n      let label = this.previous[i].getLabel();\n      this.previousLabelMap.set(label, this.previous[i]);\n    }\n\n    return this.currentLabels;\n  }\n\n  getCurrentLabels() {\n    return this.currentLabels;\n  }\n\n  getPreviousLabels() {\n    return this.previousLabels;\n  }\n\n  getNewLabels() {\n    return this.newLabels;\n  }\n\n  getDeadLabels() {\n    return this.deadLabels;\n  }\n  getLabelFromIndex(i) {\n    return this.currentLabels[i];\n  }\n  // TODO: test with invalid label\n  getIndexFromLabel(label) {\n    if (this.currentLabelMap.has(label)) {\n      return this.currentLabelMap.get(label).getIndex();\n    }\n    console.warn('label', label, 'not found');\n  }\n  getPrevious(label) {\n    // return previousLabelMap.find(label)->second->object;\n    if (this.previousLabelMap.has(label)) {\n      return this.previousLabelMap.get(label).object;\n    }\n    console.warn('label', label, 'not found');\n  }\n  getCurrent(label) {\n    if (this.currentLabelMap.has(label)) {\n      return this.currentLabelMap.get(label).object;\n    }\n    console.warn('label', label, 'not found');\n  }\n  existsCurrent(label) {\n    return this.currentLabelMap.has(label);\n  }\n  existsPrevious(label) {\n    return this.previousLabelMap.has(label);\n  }\n  getAge(label) {\n    if (this.currentLabelMap.has(label)) {\n      return this.currentLabelMap.get(label).getAge();\n    }\n    console.warn('label', label, 'not found');\n  }\n  getLastSeen(label) {\n    if (this.currentLabelMap.has(label)) {\n      return this.currentLabelMap.get(label).getLastSeen();\n    }\n    console.warn('label', label, 'not found');\n  }\n}\n\nclass RectTracker extends Tracker {\n  constructor() {\n    super();\n    this.smoothingRate = 0.5;\n    // std::map<unsigned int, cv::Rect> smoothed;\n    this.smoothed = new Map();\n  }\n\n  setSmoothingRate(smoothingRate) {\n    this.smoothingRate = smoothingRate;\n  }\n  getSmoothingRate() {\n    return this.smoothingRate;\n  }\n\n  track(objects) {\n    let labels = super.track(objects);\n    // add new objects, update old objects\n    let labelsSize = labels.length;\n    for (let i = 0; i < labelsSize; i++) {\n      let label = labels[i];\n      let cur = this.getCurrent(label);\n      if (this.smoothed.has(label)) {\n        let smooth = this.smoothed.get(label);\n        smooth.x = lerp(smooth.x, cur.x, smoothingRate);\n        smooth.y = lerp(smooth.y, cur.y, smoothingRate);\n        smooth.width = lerp(smooth.width, cur.width, smoothingRate);\n        smooth.height = lerp(smooth.height, cur.height, smoothingRate);\n      } else {\n        this.smoothed[label] = cur;\n      }\n    }\n    // TODO: check if this is legit both global and instance p5.js modes\n    for (const [label, trackedRect] of this.smoothed.entries()) {\n      if (!this.existsCurrent(label)) {\n        this.smoothed.delete(label);\n      }\n    }\n\n    return labels;\n  }\n\n  getSmoothed(label) {\n    if (this.smoothed.has(label)) {\n      return this.smoothed.get(label);\n    }\n    console.warn('label', label, 'not found');\n  }\n\n  getVelocity(i) {\n    let label = this.getLabelFromIndex(i);\n    // TODO: validate / handle i not found\n    if (this.existsPrevious(label)) {\n      let previous = this.getPrevious(label);\n      let current = this.getCurrent(label);\n      // TODO: check if this works: it's more readable, but looks like it could swallow memory over time\n      let previousPosition = createVector(\n        previous.x + previous.width * 0.5,\n        previous.y + previous.height * 0.5\n      );\n      let currentPosition = createVector(\n        current.x + current.width * 0.5,\n        current.y + current.height * 0.5\n      );\n      return p5.Vector.sub(currentPosition, previousPosition);\n    } else {\n      return createVector();\n    }\n  }\n}\n\n//   typedef Tracker<cv::Point2f> PointTracker;\nclass PointTracker extends Tracker {\n  constructor() {\n    super();\n  }\n}\n\nclass Follower {\n  constructor() {\n    this.dead = false;\n    this.label = 0;\n  }\n\n  setup(track) {}\n  update(track) {}\n  kill() {\n    this.dead = true;\n  }\n\n  setLabel(label) {\n    this.label = label;\n  }\n  getLabel() {\n    return this.label;\n  }\n  getDead() {\n    return this.dead;\n  }\n}\n\n// typedef Follower<cv::Rect> RectFollower;\n// typedef Follower<cv::Point2f> PointFollower;\nclass RectFollower extends Follower {\n  constructor() {\n    super();\n  }\n}\n\nclass PointFollower extends Follower {\n  constructor() {\n    super();\n  }\n}\n// FIXME: figure out the best way to handle RectTracker/PointTracker\nclass TrackerFollower extends Tracker {\n  constructor() {\n    super();\n    this.labels = [];\n    this.followers = [];\n  }\n\n  track(objects) {\n    // will this handle all types ?\n    super.track(objects);\n    // kill missing, update old\n    let labelsSize = this.labels.length;\n    for (let i = 0; i < labelsSize; i++) {\n      let curLabel = this.labels[i];\n      let curFollower = this.followers[i];\n      if (!this.existsCurrent(curLabel)) {\n        curFollower.kill();\n      } else {\n        curFollower.update(this.getCurrent(curLabel));\n      }\n    }\n    // add new\n    let newLabelsSize = this.newLabels.length;\n    for (let i = 0; i < newLabelsSize; i++) {\n      let curLabel = this.newLabels[i];\n      this.labels.push(curLabel);\n      let newFollower = new Follower();\n      this.followers.push(newFollower);\n      newFollower.setup(this.getCurrent(curLabel));\n      newFollower.setLabel(curLabel);\n    }\n    // remove dead\n    labelsSize = this.labels.length;\n    for (let i = labelsSize - 1; i >= 0; i--) {\n      if (this.followers[i].getDead()) {\n        this.followers.splice(i, 1);\n        this.labels.splice(i, 1);\n      }\n    }\n    return this.labels;\n  }\n\n  getFollowers() {\n    return this.followers;\n  }\n}\n\n// template <class F> class RectTrackerFollower : public TrackerFollower<cv::Rect, F> {};\n// template <class F> class PointTrackerFollower : public TrackerFollower<cv::Point2f, F> {};\nclass RectTrackerFollower extends TrackerFollower {\n  constructor() {\n    super();\n  }\n}\nclass PointTrackerFollower extends TrackerFollower {\n  constructor() {\n    super();\n  }\n}\n\nexport {\n  TrackedObject,\n  Tracker,\n  PointTracker,\n  RectTracker,\n  Follower,\n  RectFollower,\n  PointFollower,\n  TrackerFollower,\n  RectTrackerFollower,\n  PointTrackerFollower,\n};\n","const DifferenceMode = { ABSDIFF: 0, BRIGHTER: 1, DARKER: 2 };\n\nclass RunningBackground {\n  constructor(width, height) {\n    this.learningRate = 0.0001;\n    this.learningTime = 900.0;\n    this.useLearningTime = false;\n    this.thresholdValue = 26;\n    this.ignoreForeground = false;\n    this.needToReset = false;\n    this.differenceMode = DifferenceMode.ABSDIFF;\n    this.accumulator = new cv.Mat();\n    this.background = cv.Mat.zeros(height, width, cv.CV_32F);\n    this.foreground = cv.Mat.zeros(height, width, cv.CV_32F);\n    this.foregroundGray = cv.Mat.zeros(height, width, cv.CV_32F);\n  }\n\n  update(frame, thresholded) {\n    if (this.needToReset || this.accumulator.empty()) {\n      this.needToReset = false;\n      // frame.convertTo(this.accumulator, cv.CV_32F);\n      frame.copyTo(this.accumulator);\n      console.log('converted');\n    }\n\n    this.accumulator.convertTo(this.background, cv.CV_8U);\n    switch (this.differenceMode) {\n      case DifferenceMode.ABSDIFF:\n        cv.absdiff(this.background, frame, this.foreground);\n        break;\n      case DifferenceMode.BRIGHTER:\n        cv.subtract(frame, this.background, this.foreground);\n        break;\n      case DifferenceMode.DARKER:\n        cv.subtract(this.background, frame, this.foreground);\n        break;\n    }\n\n    p5.cv.copyGray(this.foreground, this.foregroundGray);\n    let thresholdMode = this.ignoreForeground\n      ? cv.THRESH_BINARY_INV\n      : cv.THRESH_BINARY;\n    cv.threshold(\n      this.foregroundGray,\n      thresholded,\n      this.thresholdValue,\n      255,\n      thresholdMode\n    );\n    // FIXME is this needed ?\n    let curLearningRate = float(this.learningRate);\n    if (this.useLearningTime) {\n      // FIXME: this needs more love\n      curLearningRate = pow(\n        1 - this.thresholdValue / 255,\n        1 / float(this.learningRate)\n      );\n    }\n    if (this.ignoreForeground) {\n      //   TODO: finish this\n      // p5.cv.accumulateWeighted(this.frame, this.accumulator, curLearningRate, this.thresholded);\n      cv.bitwise_not(this.thresholded, this.thresholded);\n    } else {\n      p5.cv.accumulateWeighted(frame, this.accumulator, curLearningRate);\n    }\n  }\n\n  getPresence() {\n    return cv.mean(this.foreground).data[0] / 255.0;\n  }\n\n  setThresholdValue(thresholdValue) {\n    this.thresholdValue = thresholdValue;\n  }\n\n  setLearningRate(learningRate) {\n    this.learningRate = learningRate;\n    this.useLearningTime = false;\n  }\n\n  setLearningTime(learningTime) {\n    this.learningTime = learningTime;\n    this.useLearningTime = true;\n  }\n\n  setIgnoreForeground(ignoreForeground) {\n    this.ignoreForeground = ignoreForeground;\n  }\n\n  setDifferenceMode(differenceMode) {\n    this.differenceMode = differenceMode;\n  }\n\n  reset() {\n    this.needToReset = true;\n  }\n}\n\nexport default RunningBackground;\n","class ObjectFinder {\n  constructor() {\n    this.rescale = 1;\n    this.multiScaleFactor = 1.1;\n    this.minNeighbors = 3;\n    this.minSizeScale = new cv.Size();\n    this.maxSizeScale = new cv.Size(1, 1);\n    this.useHistogramEqualization = true;\n    this.cannyPrunning = false;\n    this.findBiggestObject = false;\n\n    this.gray = new cv.Mat();\n    this.graySmall = new cv.Mat();\n    this.classifier = new cv.CascadeClassifier();\n    // vector<Rect>\n    this.objects = [];\n    this.tracker = new RectTracker();\n  }\n\n  setup(cascadeFilename) {\n    // FIXME: handle load errors\n    this.classifier.load(cascadeFilename);\n  }\n\n  update(newFrameMat) {\n    if (this.classifier.empty()) {\n      return;\n    }\n    if (newFrameMat.channels() == 1) {\n      this.gray = newFrameMat;\n    } else {\n      p5.cv.copyGray(newFrameMat, this.gray);\n    }\n    p5.cv.resizeToScale(this.gray, this.graySmall, this.rescale, this.rescale);\n\n    if (this.useHistogramEqualization) {\n      p5.cv.equalizeHist(this.graySmall);\n    }\n    let minSize = new cv.Size(),\n      maxSize = new cv.Size();\n    let minSide = min(this.graySmall.rows, this.graySmall.cols);\n    if (this.minSizeScale > 0) {\n      let side = this.minSizeScale * minSide;\n      minSize.width = side;\n      minSize.height = side;\n    }\n    if (this.maxSizeScale < 1) {\n      let side = this.maxSizeScale * minSide;\n      // maxSize = new cv.Size(side, side);\n      maxSize.width = side;\n      maxSize.height = side;\n    }\n\n    let rectVector = new cv.RectVector();\n    this.classifier.detectMultiScale(\n      this.graySmall,\n      rectVector,\n      this.multiScaleFactor,\n      this.minNeighbors,\n      (this.cannyPruning ? cv.CASCADE_DO_CANNY_PRUNING : 0) |\n        (this.findBiggestObject\n          ? cv.CASCADE_FIND_BIGGEST_OBJECT | cv.CASCADE_DO_ROUGH_SEARCH\n          : 0),\n      minSize,\n      maxSize\n    );\n\n    this.objects.length = 0;\n    p5.cv.cvRectVectorToArray(rectVector, this.objects);\n    rectVector.delete();\n    let objectsSize = this.objects.length;\n    let rect;\n    for (let i = 0; i < objectsSize; i++) {\n      rect = this.objects[i];\n      // FIXME check if this is meant to be /= or *=\n      (rect.width /= this.rescale), (rect.height /= this.rescale);\n      (rect.x /= this.rescale), (rect.y /= this.rescale);\n      // // FIXME check if the above does the job by reference of we need the bellow re-assingment\n      this.objects[i] = rect;\n    }\n    this.tracker.track(this.objects);\n  }\n\n  size() {\n    return this.objects.length;\n  }\n\n  getObject(i) {\n    return this.objects[i];\n  }\n\n  getObjectSmoothed(i) {\n    return this.tracker.getSmoothed(this.getLabel(i));\n  }\n\n  getVelocity(i) {\n    return this.tracker.getVelocity(i);\n  }\n\n  getLabel(i) {\n    return this.tracker.getCurrentLabels()[i];\n  }\n\n  getTracker() {\n    return this.tracker;\n  }\n\n  draw() {\n    push();\n    noFill();\n    stroke(0, 192, 0);\n    let size = this.size();\n    let object;\n    for (let i = 0; i < size; i++) {\n      object = this.getObject(i);\n      rect(object.x, object.y, object.width, object.height);\n      text(this.getLabel(i), object.x, object.y - 3);\n    }\n    pop();\n  }\n\n  setPreset(preset) {\n    if (preset == ObjectFinder.FAST) {\n      this.setRescale(0.25);\n      this.setMinNeighbors(2);\n      this.setMultiScaleFactor(1.2);\n      this.setMinSizeScale(0.25);\n      this.setMaxSizeScale(0.75);\n      this.setCannyPruning(true);\n      this.setFindBiggestObject(false);\n    } else if (preset == ObjectFinder.ACCURATE) {\n      this.setRescale(0.5);\n      this.setMinNeighbors(6);\n      this.setMultiScaleFactor(1.02);\n      this.setMinSizeScale(0.1);\n      this.setMaxSizeScale(1);\n      this.setCannyPruning(true);\n      this.setFindBiggestObject(false);\n    } else if (preset == ObjectFinder.SENSITIVE) {\n      this.setRescale(0.5);\n      this.setMinNeighbors(1);\n      this.setMultiScaleFactor(1.02);\n      this.setMinSizeScale(0.1);\n      this.setMaxSizeScale(1);\n      this.setCannyPruning(false);\n      this.setFindBiggestObject(false);\n    }\n  }\n\n  setRescale(rescale) {\n    this.rescale = rescale;\n  }\n\n  setMinNeighbors(minNeighbors) {\n    this.minNeighbors = minNeighbors;\n  }\n\n  setMultiScaleFactor(multiScaleFactor) {\n    this.multiScaleFactor = multiScaleFactor;\n  }\n\n  setCannyPruning(cannyPruning) {\n    this.cannyPrunning = cannyPruning;\n  }\n\n  setFindBiggestObject(findBiggestObject) {\n    this.findBiggestObject = findBiggestObject;\n  }\n\n  setUseHistogramEqualization(useHistogramEqualization) {\n    this.useHistogramEqualization = useHistogramEqualization;\n  }\n\n  setMinSizeScale(minSizeScale) {\n    this.minSizeScale = minSizeScale;\n  }\n\n  setMaxSizeScale(maxSizeScale) {\n    this.maxSizeScale = maxSizeScale;\n  }\n}\n\nObjectFinder.FAST = 0;\nObjectFinder.ACCURATE = 1;\nObjectFinder.SENSITIVE = 2;\n\nexport default ObjectFinder;\n","class Flow {\n  constructor() {\n    this.last = new cv.Mat();\n    this.curr = new cv.Mat();\n    this.hasFlow = false;\n  }\n\n  //call these functions to calculate flow on sequential images.\n  //After this call the flow field will be populated and\n  //subsequent calls to getFlow() will be updated\n\n  //call with two contiguous images\n  calcOpticalFlowTo(lastMat, currentMat) {\n    if (lastMat.channels() == 1 && currentMat.channels() == 1) {\n      this.calcFlow(lastMat, currentMat);\n    } else {\n      p5.cv.copyGray(lastMat, this.last);\n      p5.cv.copyGray(currentMat, this.curr);\n      this.calcFlow(this.last, this.curr);\n    }\n    this.hasFlow = true;\n  }\n\n  //call with subsequent images to do running optical flow.\n  //the Flow class internally stores the last image for convenience\n  calcOpticalFlow(currentMat) {\n    p5.cv.copyGray(currentMat, this.curr);\n    let lastSize = this.last.size();\n    let currSize = this.curr.size();\n    if (\n      lastSize.width == currSize.width &&\n      lastSize.height == currSize.height\n    ) {\n      this.calcFlow(this.last, this.curr);\n      this.hasFlow = true;\n    }\n    p5.cv.swap(this.curr, this.last);\n  }\n\n  draw(x, y, renderWidth, renderHeight) {\n    x = x || 0;\n    y = y || 0;\n    renderWidth = renderWidth || width;\n    renderHeight = renderHeight || height;\n    if (this.hasFlow) {\n      this.drawFlow(x, y, width, height);\n    }\n  }\n\n  drawRect(rect) {\n    if (this.hasFlow) {\n      this.drawFlow(rect.x, rect.y, rect.width, rect.height);\n    }\n  }\n\n  getWidth() {\n    return this.curr.cols;\n  }\n\n  getHeight() {\n    return this.curr.rows;\n  }\n\n  resetFlow() {\n    this.last.setTo(p5.cv.ZERO_SCALAR);\n    this.curr.setTo(p5.cv.ZERO_SCALAR);\n    this.hasFlow = false;\n  }\n\n  // for subclass override\n  calcFlow(prevMat, nextMat) {}\n}\n\n//there are two implementations of Flow\n//use Farneback for a dense flow field,\n//use PyrLK for specific features\n\n//see http://opencv.willowgarage.com/documentation/cpp/motion_analysis_and_object_tracking.html\n//for more info on the meaning of these parameters\n\nclass FlowPyrLK extends Flow {\n  constructor() {\n    super();\n    this.prevPts = new cv.Mat();\n    this.nextPts = new cv.Mat();\n\n    //LK feature finding parameters\n    this.windowSize = new cv.Size(32, 32);\n    this.maxLevel = 3;\n    this.maxFeatures = 200;\n\n    // parameters for ShiTomasi corner detection\n    this.maxCorners = 30;\n    this.blockSize = 7;\n    this.qualityLevel = 0.01;\n    //min distance for PyrLK\n    this.minDistance = 4;\n\n    this.criteria = new cv.TermCriteria(\n      cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT,\n      10,\n      0.03\n    );\n\n    //pyramid levels\n    this.pyramidLevels = 10;\n\n    this.calcFeaturesNextFrame = true;\n\n    //pyramid + err/status data\n    this.pyramid = new cv.Mat();\n    this.prevPyramid = new cv.Mat();\n    this.status = new cv.Mat();\n    this.err = new cv.Mat();\n  }\n\n  //flow parameters\n  setMinDistance(minDistance) {\n    this.minDistance = minDistance;\n  }\n  setWindowSize(winSize) {\n    this.windowSize.width = winSize;\n    this.windowSize.height = winSize;\n  }\n\n  //feature finding parameters\n  setMaxLevel(maxLevel) {\n    this.maxLevel = maxLevel;\n  }\n\n  setMaxFeatures(maxFeatures) {\n    this.maxFeatures = maxFeatures;\n  }\n\n  setQualityLevel(qualityLevel) {\n    this.qualityLevel = qualityLevel;\n  }\n\n  setPyramidLevels(levels) {\n    this.pyramidLevels = levels;\n  }\n\n  //returns tracking features for this image\n  getFeatures() {\n    // FIXME: make sure these are cv.Point like\n    return p5.cv.cvFeaturesToPoints(this.prevPts);\n  }\n\n  getCurrent() {\n    let result = [];\n    for (let i = 0; i < this.nextPts.rows; i++) {\n      if (this.status.data[i]) {\n        result.push(p5.cv.getFeatureAsPoint(this.nextPts, i));\n      }\n    }\n    return result;\n  }\n\n  getMotion() {\n    let result = [];\n    let featuresSize = this.prevPts.rows;\n    for (let i = 0; i < featuresSize; i++) {\n      if (this.status.data[i]) {\n        result.push(\n          cv.Point.sub(\n            p5.cv.getFeatureAsPoint(this.nextPts, i),\n            p5.cv.getFeatureAsPoint(this.prevPts, i)\n          )\n        );\n      }\n    }\n    return result;\n  }\n\n  // recalculates features to track\n  resetFeaturesToTrack() {\n    this.calcFeaturesNextFrame = true;\n  }\n  setFeaturesToTrack(features) {\n    this.nextPts = features;\n    this.calcFeaturesNextFrame = false;\n  }\n  resetFlow() {\n    super.resetFlow();\n    this.resetFeaturesToTrack();\n    this.prevPts = new cv.Mat();\n  }\n\n  drawFlow(drawX, drawY, drawWidth, drawHeight) {\n    let scaleX = drawWidth / width;\n    let scaleY = drawHeight / height;\n    let prevPtsSize = this.prevPts.rows;\n\n    beginShape(LINES);\n    for (let i = 0; i < prevPtsSize; i++) {\n      if (this.status.data[i]) {\n        vertex(\n          this.prevPts.data32F[i * 2] * scaleX + drawX,\n          this.prevPts.data32F[i * 2 + 1] * scaleY + drawY,\n          9\n        );\n\n        vertex(\n          this.nextPts.data32F[i * 2] * scaleX + drawX,\n          this.nextPts.data32F[i * 2 + 1] * scaleY + drawY,\n          9\n        );\n      }\n    }\n    endShape();\n  }\n\n  calcFlow(prevMat, nextMat) {\n    if (!this.nextPts.empty() || this.calcFeaturesNextFrame) {\n      if (this.calcFeaturesNextFrame) {\n        this.calcFeaturesToTrack(this.prevPts, nextMat);\n        this.calcFeaturesNextFrame = false;\n      } else {\n        p5.cv.swap(this.prevPts, this.nextPts);\n      }\n      this.nextPts.setTo(p5.cv.ZERO_SCALAR);\n\n      cv.calcOpticalFlowPyrLK(\n        prevMat,\n        nextMat,\n        this.prevPts,\n        this.nextPts,\n        this.status,\n        this.err,\n        this.windowSize,\n        this.maxLevel\n      );\n\n      // cv.calcOpticalFlowPyrLK(oldGray, frameGray, p0, p1, st, err, winSize, maxLevel, criteria);\n\n      // status.resize(nextPts.size(),0);\n    } else {\n      this.calcFeaturesToTrack(this.nextPts, nextMat);\n    }\n  }\n\n  calcFeaturesToTrack(features, nextMat) {\n    /* goodFeaturesToTrack arguments\n\n        image – single-channel 8-bit input image.\n        edges – output edge map; it has the same size and type as image .\n        threshold1 – first threshold for the hysteresis procedure.\n        threshold2 – second threshold for the hysteresis procedure.\n        apertureSize – aperture size for the Sobel() operator.\n        L2gradient - a flag, indicating whether a more accurate L_2 norm =\\sqrt{(dI/dx)^2 + (dI/dy)^2} should be used to calculate the image gradient magnitude ( L2gradient=true ), or whether the default L_1 norm =|dI/dx|+|dI/dy| is enough ( L2gradient=false ).\n        \n        cv.goodFeaturesToTrack(oldGray, p0, maxCorners, qualityLevel, minDistance, none, blockSize);\n\n        */\n    cv.goodFeaturesToTrack(\n      nextMat,\n      features,\n      this.maxFeatures,\n      this.qualityLevel,\n      this.minDistance\n    );\n  }\n}\n\nclass FlowFarneback extends Flow {\n  constructor() {\n    super();\n\n    this.flow = new cv.Mat();\n\n    this.pyramidScale = 0.5;\n    this.numLevels = 4;\n    this.windowSize = 8;\n    this.numIterations = 2;\n    this.polyN = 7;\n    this.polySigma = 1.5;\n    this.farnebackGaussian = false;\n    this.renderStep = 60;\n\n    // let frame2 = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    // let next = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    // let flow = new cv.Mat(video.height, video.width, cv.CV_32FC2);\n    // let flowVec = new cv.MatVector();\n    // let mag = new cv.Mat(video.height, video.width, cv.CV_32FC1);\n    // let ang = new cv.Mat(video.height, video.width, cv.CV_32FC1);\n    // let rgb = new cv.Mat(video.height, video.width, cv.CV_8UC3);\n  }\n\n  setPyramidScale(scale) {\n    if (scale < 0.0 || scale >= 1.0) {\n      console.warn(\n        'FlowFarneback::setPyramidScale',\n        'setting scale to a number outside of 0 - 1'\n      );\n      scale = constrain(scale, 0.0, 1.0);\n    }\n    this.pyramidScale = scale;\n  }\n  setNumLevels(levels) {\n    this.numLevels = levels;\n  }\n  setWindowSize(winSize) {\n    this.windowSize = winSize;\n  }\n  setNumIterations(iterations) {\n    this.numIterations = iterations;\n  }\n  setPolyN(polyN) {\n    this.polyN = polyN;\n  }\n  setPolySigma(polySigma) {\n    this.polySigma = polySigma;\n  }\n  setUseGaussian(gaussian) {\n    this.farnebackGaussian = gaussian;\n  }\n\n  //call this if you switch to a new video file to reset internal caches\n  resetFlow() {\n    super.resetFlow();\n    this.flow.setTo(p5.cv.ZERO_SCALAR);\n  }\n\n  calcFlow(prevMat, nextMat) {\n    let flags = 0;\n    if (this.hasFlow) {\n      flags = cv.OPTFLOW_USE_INITIAL_FLOW;\n    }\n    if (this.farnebackGaussian) {\n      flags |= cv.OPTFLOW_FARNEBACK_GAUSSIAN;\n    }\n    // cv.calcOpticalFlowFarneback(prevMat, nextMat, this.flow, 0.5, 3, 15, 3, 5, 1.2, 0);\n\n    cv.calcOpticalFlowFarneback(\n      prevMat,\n      nextMat,\n      this.flow,\n      this.pyramidScale,\n      this.numLevels,\n      this.windowSize,\n      this.numIterations,\n      this.polyN,\n      this.polySigma,\n      flags\n    );\n  }\n\n  getFlow() {\n    if (!hasFlow) {\n      this.flow = cv.Mat.zeros(1, 1, CV_32FC2);\n    }\n    return this.flow;\n  }\n\n  getTotalFlow() {\n    return this.getTotalFlowInRegion(0, 0, this.flow.cols, this.flow.rows);\n  }\n  getAverageFlow() {\n    return this.getAverageFlowInRegion(0, 0, this.flow.cols, this.flow.rows);\n  }\n  getFlowOffset(x, y) {\n    if (!this.hasFlow) {\n      return new cv.Point();\n    }\n    // (x + (y * w) ) * channels()\n    let xIndex = (x + y * this.flow.cols) * 2;\n    let yIndex = xIndex + 1;\n    return { x: this.flow.data32F[xIndex], y: this.flow.data32F[yIndex] };\n  }\n  getFlowPosition(x, y) {\n    let position = this.getFlowOffset(x, y);\n    position.x += x;\n    position.y += y;\n    return position;\n  }\n  getTotalFlowInRegion(regionX, regionY, regionWidth, regionHeight) {\n    if (!this.hasFlow) {\n      return new cv.Point(0, 0);\n    }\n\n    let x = 0;\n    let y = 0;\n    let total = this.flow.total();\n    let data = this.flow.data32F;\n\n    for (let i = 0; i < total; i++) {\n      let xIndex = i * 2;\n      let yIndex = i * 2 + 1;\n      x += data[xIndex];\n      y += data[yIndex];\n    }\n\n    return { x: x, y: y };\n  }\n\n  getAverageFlowInRegion(regionX, regionY, regionWidth, regionHeight) {\n    let flow = this.getTotalFlowInRegion(\n      regionX,\n      regionY,\n      regionWidth,\n      regionHeight\n    );\n    flow.x /= regionWidth;\n    flow.y /= regionHeight;\n    return flow;\n  }\n\n  drawFlow(rectX, rectY, rectWidth, rectHeight) {\n    if (!this.hasFlow) {\n      return;\n    }\n    let scaleX = rectWidth / this.flow.cols;\n    let scaleY = rectHeight / this.flow.rows;\n    console.log(rectWidth, rectHeight);\n    beginShape(LINES);\n    let flowPosition;\n    for (let y = 0; y < this.flow.rows; y += this.renderStep) {\n      for (let x = 0; x < this.flow.cols; x += this.renderStep) {\n        flowPosition = this.getFlowPosition(x, y);\n        vertex(x * scaleX + rectX, y * scaleY + rectY);\n        vertex(\n          flowPosition.x * scaleX + rectX,\n          flowPosition.y * scaleY + rectY\n        );\n      }\n    }\n    endShape();\n  }\n}\n\nclass OFlow extends Flow {\n  constructor() {\n    super();\n    this.step = 8;\n    this.flow = null;\n\n    this.uMotionGraph = new Graph(100, -this.step / 2, +this.step / 2);\n    this.vMotionGraph = new Graph(100, -this.step / 2, +this.step / 2);\n  }\n\n  calcOpticalFlow(currentMat) {\n    this.curr = currentMat;\n    let lastSize = this.last.size();\n    let currSize = this.curr.size();\n    if (\n      lastSize.width == currSize.width &&\n      lastSize.height == currSize.height\n    ) {\n      // TODO: profile CPU improvements\n      // cheap way to ignore duplicate frames\n      if (!p5.cv.samePixels(this.last.data, currentMat.data, 4, width)) {\n        this.calcFlow(this.last, this.curr);\n        this.hasFlow = true;\n      }\n    }\n    p5.cv.swap(this.curr, this.last);\n  }\n\n  // TODO: this could be simpler with OpenCV operations instead of individual byte access ?\n  // assumes rgba images, but only uses one channel\n  calcFlow(prevMat, nextMat) {\n    if (prevMat.type() != cv.CV_8UC4 || nextMat.type() != cv.CV_8UC4) {\n      console.warn('currently supporting only RGBA images');\n      this.hasFlow = false;\n      return;\n    }\n\n    let width = prevMat.cols;\n    let height = prevMat.rows;\n\n    let newImage = nextMat.data;\n    let oldImage = prevMat.data;\n\n    var zones = [];\n    var step = this.step;\n    var winStep = step * 2 + 1;\n\n    var A2, A1B2, B1, C1, C2;\n    var u, v, uu, vv;\n    uu = vv = 0;\n    var wMax = width - step - 1;\n    var hMax = height - step - 1;\n    var globalY, globalX, localY, localX;\n\n    for (globalY = step + 1; globalY < hMax; globalY += winStep) {\n      for (globalX = step + 1; globalX < wMax; globalX += winStep) {\n        A2 = A1B2 = B1 = C1 = C2 = 0;\n        // console.log('here',globalX,globalY);\n        for (localY = -step; localY <= step; localY++) {\n          for (localX = -step; localX <= step; localX++) {\n            var address = (globalY + localY) * width + globalX + localX;\n\n            var gradX =\n              newImage[(address - 1) * 4] - newImage[(address + 1) * 4];\n\n            var gradY =\n              newImage[(address - width) * 4] - newImage[(address + width) * 4];\n            var gradT = oldImage[address * 4] - newImage[address * 4];\n\n            A2 += gradX * gradX;\n            A1B2 += gradX * gradY;\n            B1 += gradY * gradY;\n            C2 += gradX * gradT;\n            C1 += gradY * gradT;\n          }\n        }\n\n        var delta = A1B2 * A1B2 - A2 * B1;\n\n        if (delta !== 0) {\n          /* system is not singular - solving by Kramer method */\n          var Idelta = step / delta;\n          var deltaX = -(C1 * A1B2 - C2 * B1);\n          var deltaY = -(A1B2 * C2 - A2 * C1);\n\n          u = deltaX * Idelta;\n          v = deltaY * Idelta;\n        } else {\n          /* singular system - find optical flow in gradient direction */\n          var norm = (A1B2 + A2) * (A1B2 + A2) + (B1 + A1B2) * (B1 + A1B2);\n          if (norm !== 0) {\n            var IGradNorm = step / norm;\n            var temp = -(C1 + C2) * IGradNorm;\n\n            u = (A1B2 + A2) * temp;\n            v = (B1 + A1B2) * temp;\n          } else {\n            u = v = 0;\n          }\n        }\n\n        if (-winStep < u && u < winStep && -winStep < v && v < winStep) {\n          uu += u;\n          vv += v;\n          zones.push(new cv.Rect(globalX, globalY, u, v));\n        }\n      }\n    }\n\n    this.flow = {\n      zones: zones,\n      u: uu / zones.length,\n      v: vv / zones.length,\n    };\n\n    this.hasFlow = true;\n\n    return this.flow;\n  }\n\n  drawFlow(rectX, rectY, rectWidth, rectHeight) {\n    if (!this.hasFlow) {\n      return;\n    }\n    let scaleX = rectWidth / this.curr.cols;\n    let scaleY = rectHeight / this.curr.rows;\n\n    if (this.flow && this.flow.u != 0 && this.flow.v != 0) {\n      this.uMotionGraph.addSample(this.flow.u);\n      this.vMotionGraph.addSample(this.flow.v);\n\n      strokeWeight(2);\n\n      let step = this.step;\n      this.flow.zones.forEach(function (zone) {\n        stroke(\n          map(zone.width, -step, +step, 0, 255),\n          map(zone.height, -step, +step, 0, 255),\n          128\n        );\n        line(\n          zone.x * scaleX + rectX,\n          zone.y * scaleY + rectY,\n          (zone.x + zone.width) * scaleX + rectX,\n          (zone.y + zone.height) * scaleY + rectY\n        );\n      });\n    }\n  }\n\n  plotGraphs(rectX, rectY, rectWidth, rectHeight) {\n    if (!this.hasFlow) {\n      return;\n    }\n    if (this.flow && this.flow.u != 0 && this.flow.v != 0) {\n      // draw left-right motion\n      this.uMotionGraph.draw(rectWidth, rectHeight / 2);\n      line(\n        rectX,\n        rectY + rectHeight / 4,\n        rectX + rectWidth,\n        rectY + rectHeight / 4\n      );\n\n      // draw up-down motion\n      translate(0, rectHeight / 2);\n      this.vMotionGraph.draw(rectWidth, rectHeight / 2);\n      line(\n        rectX,\n        rectY + rectHeight / 4,\n        rectX + rectWidth,\n        rectY + rectHeight / 4\n      );\n    }\n  }\n}\n\np5.cv.samePixels = function (a1, a2, stride, n) {\n  for (var i = 0; i < n; i += stride) {\n    if (a1[i] != a2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n// TODO: review all functions that make new matrices and cleanup\np5.cv.same = function (matA, matB) {\n  let diff = new cv.Mat();\n  let matAGray = new cv.Mat();\n  let matBGray = new cv.Mat();\n  p5.cv.copyGray(matA, matAGray);\n  p5.cv.copyGray(matB, matBGray);\n  cv.absdiff(matAGray, matBGray, diff);\n  let same = cv.countNonZero(diff) == 0;\n  diff.delete();\n  matAGray.delete();\n  matBGray.delete();\n  return same;\n};\n\nexport { Flow, FlowPyrLK, FlowFarneback, OFlow };\n","p5.cv.TrackingColorMode = {\n  TRACK_COLOR_RGB: 0,\n  TRACK_COLOR_HSV: 1,\n  TRACK_COLOR_H: 2,\n  TRACK_COLOR_HS: 3,\n};\n\nclass ContourFinder {\n  constructor() {\n    this.hsvBuffer = new cv.Mat();\n    this.thresh = new cv.Mat();\n\n    this.autoThreshold = true;\n    this.invert = false;\n    this.simplify = true;\n\n    this.thresholdValue = 128;\n    this.thresholdValueMax = 255;\n\n    this.useTargetColor = false;\n    this.trackingColorMode = p5.cv.TrackingColorMode.TRACK_COLOR_HSV;\n    this.targetColor = color(0);\n\n    this.minArea = 0;\n    this.maxArea = Number.POSITIVE_INFINITY;\n\n    this.minAreaNorm = false;\n    this.maxAreaNorm = false;\n    // FIXME check of this needs will work as [] or Mat\n    this.contours = [];\n    this.polylines = [];\n\n    this.tracker = new RectTracker();\n    this.boundingRects = [];\n    this.holes = [];\n\n    this.contourFindingMode = cv.CV_RETR_EXTERNAL;\n    this.sortBySize = false;\n\n    this.resetMinArea();\n    this.resetMaxArea();\n  }\n\n  findContours(sourceMat) {\n    // threshold the image using a tracked color or just binary grayscale\n    if (this.useTargetColor) {\n      // Scalar is equivalent to [0, 0, 0, 0]\n      let offset = [thresholdValue, thresholdValue, thresholdValue, 0];\n      let base = p5.cv.colorToCvScalar(targetColor);\n      if (this.trackingColorMode == p5.cv.TrackingColorMode.TRACK_COLOR_RGB) {\n        //inRange(img, base - offset, base + offset, thresh);\n        cv.inRange(\n          sourceMat,\n          cv.Scalar.sub(base, offset),\n          cv.Scalar.add(base + offset),\n          this.thresh\n        );\n      } else {\n        // all the HSV modes are broken incorrect,\n        // because opencv uses hue 0-180 not 0-255\n        // which means that the math doesn't wrap.\n        if (this.trackingColorMode == p5.cv.TrackingColorMode.TRACK_COLOR_H) {\n          offset[1] = 255;\n          offset[2] = 255;\n        }\n        if (this.trackingColorMode == p5.cv.TrackingColorMode.TRACK_COLOR_HS) {\n          offset[2] = 255;\n        }\n        cv.cvtColor(sourceMat, this.hsvBuffer, cv.COLOR_RGBA2HSV);\n        base = p5.cv.convertSingleColor(targetColor, cv.COLOR_RGBA2HSV);\n        let lowerb = cv.Scalar.sub(base, offset);\n        let upperb = cv.Scalar.add(base, offset);\n        cv.inRange(this.hsvBuffer, lowerb, upperb, this.thresh);\n      }\n    } else {\n      p5.cv.copyGray(sourceMat, this.thresh);\n    }\n\n    if (this.autoThreshold) {\n      p5.cv.threshold(this.thresh, this.thresholdValue, this.invert);\n    }\n\n    // run the contour finder\n    let allContours = new cv.MatVector();\n    let hierarchy = new cv.Mat();\n    let simplifyMode = this.simplify\n      ? cv.HAIN_APPROX_SIMPLE\n      : cv.CHAIN_APPROX_NONE;\n    cv.findContours(\n      this.thresh,\n      allContours,\n      hierarchy,\n      this.contourFindingMode,\n      simplifyMode\n    );\n\n    // filter the contours\n    let needMinFilter = this.minArea > 0;\n    let needMaxFilter = this.maxAreaNorm\n      ? this.maxArea < 1\n      : this.maxArea < Number.POSITIVE_INFINITY;\n    let allIndices = [];\n    let allAreas = [];\n    let allHoles = [];\n    if (needMinFilter || needMaxFilter) {\n      let imgArea = sourceMat.rows * sourceMat.cols;\n      let imgMinArea = this.minAreaNorm ? this.minArea * imgArea : this.minArea;\n      let imgMaxArea = this.maxAreaNorm ? this.maxArea * imgArea : this.maxArea;\n\n      for (let i = 0; i < allContours.size(); i++) {\n        let curArea = cv.contourArea(allContours.get(i), true);\n        let hole = true;\n        if (curArea < 0) {\n          curArea = -curArea;\n          hole = false;\n        }\n        allHoles.push(hole);\n        allAreas.push(curArea);\n        if (\n          (!needMinFilter || curArea >= imgMinArea) &&\n          (!needMaxFilter || curArea <= imgMaxArea)\n        ) {\n          allIndices.push_back(i);\n        }\n      }\n    } else {\n      for (let i = 0; i < allContours.size(); i++) {\n        if (this.sortBySize) {\n          allAreas.push(cv.contourArea(allContours.get(i)));\n        }\n        allIndices.push(i);\n      }\n    }\n\n    if (allIndices.length > 1 && this.sortBySize) {\n      // Sort contour indices, based on a separate vector of areas.\n      // Sort contour indices into decreasing order, based on a vector of\n      // contour areas.  Later, we will use these indices to order the\n      // contours (which are stored in a separate vector).\n      /* bool operator()(size_t a, size_t b) const\n            {\n                return mAreaVec[a] > mAreaVec[b];\n            } */\n      allIndices.sort((a, b) => {\n        if (allAreas[a] > allAreas[b]) return 1;\n        if (allAreas[a] < allAreas[b]) return -1;\n        return 0;\n      });\n    }\n\n    // generate polylines and bounding boxes from the contours\n    this.contours.length = 0;\n    this.polylines.length = 0;\n    this.boundingRects.length = 0;\n    this.holes.length = 0;\n    let allIndicesSize = allIndices.length;\n    for (let i = 0; i < allIndicesSize; i++) {\n      let contour = allContours.get(allIndices[i]);\n      this.contours.push(contour);\n      this.polylines.push(p5.cv.cvPointsToVectors(contour));\n      this.boundingRects.push(cv.boundingRect(contour));\n      this.holes.push(allHoles[allIndices[i]]);\n    }\n\n    // track bounding boxes\n    this.tracker.track(this.boundingRects);\n  }\n\n  setFindHoles(findHoles) {\n    if (findHoles) {\n      this.contourFindingMode = cv.RETR_LIST;\n    } else {\n      this.contourFindingMode = cv.RETR_EXTERNAL;\n    }\n  }\n\n  setSortBySize(sizeSort) {\n    this.sortBySize = sizeSort;\n  }\n\n  getContours() {\n    return this.contours;\n  }\n\n  getPolylines() {\n    return this.polylines;\n  }\n\n  getBoundingRects() {\n    return this.boundingRects;\n  }\n\n  size() {\n    return this.contours.length;\n  }\n\n  getContour(i) {\n    return this.contours[i];\n  }\n\n  getPolyline(i) {\n    return this.polylines[i];\n  }\n\n  getBoundingRect(i) {\n    return this.boundingRects[i];\n  }\n\n  getCenter(i) {\n    let box = this.getBoundingRect(i);\n    return new cv.Point(box.x + box.width * 0.5, box.y + box.height * 0.5);\n  }\n\n  getCentroid(i) {\n    let m = cv.moments(this.contours[i]);\n    if (m.m00 != 0) {\n      return new cv.Point(m.m10 / m.m00, m.m01 / m.m00);\n    } else {\n      return new cvPoint(0, 0);\n    }\n  }\n\n  getAverage(i) {\n    let average = cv.mean(this.contours[i]);\n    return new cv.Point(average[0], average[1]);\n  }\n\n  getBalance(i) {\n    return cv.Point.sub(this.getCentroid(i), this.getCenter(i));\n  }\n\n  getContourArea(i) {\n    return cv.contourArea(this.contours[i]);\n  }\n\n  getArcLength(i) {\n    return cv.arcLength(this.contours[i], true);\n  }\n\n  getConvexHull(i) {\n    return p5.cv.convexHullFromMat(this.contours[i]);\n  }\n\n  getConvexityDefects(i) {\n    return p5.cv.convexityDefectsCv(this.contours[i]);\n  }\n\n  getMinAreaRect(i) {\n    return cv.minAreaRect(this.contours[i]);\n  }\n\n  getMinEnclosingCircle(i) {\n    return cv.minEnclosingCircle(this.contours[i]);\n  }\n\n  getFitEllipse(i) {\n    if (this.contours[i].total() < 5) {\n      return this.getMinAreaRect(i);\n    }\n    return cv.fitEllipse(this.contours[i]);\n  }\n\n  getFitQuad(i) {\n    let convexHull = this.getConvexHull(i);\n    let quad = convexHull.clone();\n\n    const targetPoints = 4;\n    const maxIterations = 16;\n    const infinity = Number.POSITIVE_INFINITY;\n    let minEpsilon = 0;\n    let maxEpsilon = infinity;\n    let curEpsilon = 16; // good initial guess\n\n    // unbounded binary search to simplify the convex hull until it's 4 points\n    if (quad.total() > 4) {\n      for (let i = 0; i < maxIterations; i++) {\n        cv.approxPolyDP(convexHull, quad, curEpsilon, true);\n        if (quad.total() == targetPoints) {\n          break;\n        }\n        if (quad.total() > targetPoints) {\n          minEpsilon = curEpsilon;\n          if (maxEpsilon == infinity) {\n            curEpsilon = curEpsilon * 2;\n          } else {\n            curEpsilon = (maxEpsilon + minEpsilon) / 2;\n          }\n        }\n        if (quad.total() < targetPoints) {\n          maxEpsilon = curEpsilon;\n          curEpsilon = (maxEpsilon + minEpsilon) / 2;\n        }\n      }\n    }\n\n    return quad;\n  }\n\n  getHole(i) {\n    return this.holes[i];\n  }\n\n  getVelocity(i) {\n    return this.tracker.getVelocity(i);\n  }\n\n  getLabel(i) {\n    return this.tracker.getCurrentLabels()[i];\n  }\n\n  getTracker() {\n    return this.tracker;\n  }\n\n  setAutoThreshold(autoThreshold) {\n    this.autoThreshold = autoThreshold;\n  }\n\n  setThreshold(thresholdValue) {\n    this.thresholdValue = thresholdValue;\n  }\n  // FIXME: this might not actually be used\n  setThresholdMax(thresholdValueMax) {\n    this.thresholdValueMax = thresholdValueMax;\n  }\n\n  setInvert(invert) {\n    this.invert = invert;\n  }\n\n  setUseTargetColor(useTargetColor) {\n    this.useTargetColor = useTargetColor;\n  }\n\n  setTargetColor(targetColor, trackingColorMode) {\n    this.useTargetColor = true;\n    this.targetColor = targetColor;\n    this.trackingColorMode = trackingColorMode;\n  }\n\n  setSimplify(simplify) {\n    this.simplify = simplify;\n  }\n\n  draw() {\n    push();\n    noFill();\n    let polylinesSize = this.polylines.length;\n    for (let i = 0; i < polylinesSize; i++) {\n      p5.cv.drawVectors(this.polylines[i]);\n      let boundingRect = this.getBoundingRect(i);\n      rect(\n        boundingRect.x,\n        boundingRect.y,\n        boundingRect.width,\n        boundingRect.height\n      );\n    }\n    pop();\n  }\n\n  resetMinArea() {\n    this.setMinArea(0);\n  }\n\n  resetMaxArea() {\n    this.setMaxArea(Number.POSITIVE_INFINITY);\n  }\n\n  setMinArea(minArea) {\n    this.minArea = minArea;\n    this.maxAreaNorm = false;\n  }\n\n  setMaxArea(maxArea) {\n    this.maxArea = maxArea;\n    this.minAreaNorm = false;\n  }\n\n  setMinAreaRadius(minAreaRadius) {\n    this.minArea = PI * minAreaRadius * minAreaRadius;\n    this.minAreaNorm = false;\n  }\n\n  setMaxAreaRadius(maxAreaRadius) {\n    this.maxArea = PI * maxAreaRadius * maxAreaRadius;\n    this.maxAreaNorm = false;\n  }\n\n  setMinAreaNorm(minAreaNorm) {\n    this.minArea = minAreaNorm;\n    this.minAreaNorm = true;\n  }\n\n  setMaxAreaNorm(maxAreaNorm) {\n    this.maxArea = maxAreaNorm;\n    this.maxAreaNorm = true;\n  }\n}\n\nexport default ContourFinder;\n","import './p5.cv.utils';\nimport './p5.cv.utilities';\nimport './p5.cv.helpers';\nimport './p5.cv.wrappers';\n\nimport './p5.cv.tracker';\n\nimport {\n  TrackedObject,\n  Tracker,\n  PointTracker,\n  RectTracker,\n  Follower,\n  RectFollower,\n  PointFollower,\n  TrackerFollower,\n  RectTrackerFollower,\n  PointTrackerFollower,\n} from './p5.cv.tracker';\n\nwindow.Tracker              = Tracker;\nwindow.TrackedObject        = TrackedObject;\nwindow.RectTracker          = RectTracker;\nwindow.PointTracker         = PointTracker;\nwindow.Follower             = Follower;\nwindow.RectFollower         = RectFollower;\nwindow.PointFollower        = PointFollower;\nwindow.TrackerFollower      = TrackerFollower;\nwindow.RectTrackerFollower  = RectTrackerFollower;\nwindow.PointTrackerFollower = PointTrackerFollower;\n\nimport RunningBackground from './p5.cv.running_background';\n\nwindow.RunningBackground    = RunningBackground;\n\nimport ObjectFinder from './p5.cv.object_finder';\n\nwindow.ObjectFinder         = ObjectFinder;\n\nimport {\n    Flow,\n    FlowPyrLK,\n    FlowFarneback,\n    OFlow\n} from './p5.cv.flow';\n\nwindow.Flow          = Flow;\nwindow.FlowPyrLK     = FlowPyrLK;\nwindow.FlowFarneback = FlowFarneback;\nwindow.OFlow         = OFlow;\n\nimport './p5.cv.contour_finder';\nimport ContourFinder from './p5.cv.contour_finder';\n\nwindow.ContourFinder     = ContourFinder;"],"sourceRoot":""}